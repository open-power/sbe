/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00055.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00055_H_
#define __PROC_REG00055_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[INT_CQ_IC_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_IC_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_IC_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_IC_BAR]

//>> GET_[INT_CQ_IC_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_IC_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_IC_BAR;
#endif
    return fapi2::getScom(i_target, INT_CQ_IC_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_IC_BAR]

//>> PUT_[INT_CQ_IC_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_IC_BAR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return fapi2::putScom(i_target, INT_CQ_IC_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_IC_BAR]


//>> SET_[INT_CQ_IC_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_IC_BAR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_IC_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_VALID]

//>> SET_[INT_CQ_IC_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_IC_BAR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_IC_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_VALID]

//>> SET_[INT_CQ_IC_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.setBit<INT_CQ_IC_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_IC_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_VALID]

//>> CLEAR_[INT_CQ_IC_BAR_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_IC_BAR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.clearBit<INT_CQ_IC_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_IC_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_IC_BAR_VALID]

//>> GET_[INT_CQ_IC_BAR_VALID]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_IC_BAR_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return i_data.extractToRight<INT_CQ_IC_BAR_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_IC_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_IC_BAR_VALID]

//>> GET_[INT_CQ_IC_BAR_VALID]
static inline bool GET_INT_CQ_IC_BAR_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return i_data.getBit<INT_CQ_IC_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_IC_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_IC_BAR_VALID]

//>> SET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_IC_BAR_PAGE_SIZE_64K,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_IC_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_PAGE_SIZE_64K(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_IC_BAR_PAGE_SIZE_64K,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_IC_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.setBit<INT_CQ_IC_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_IC_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]

//>> CLEAR_[INT_CQ_IC_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_IC_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.clearBit<INT_CQ_IC_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_IC_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_IC_BAR_PAGE_SIZE_64K]

//>> GET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_IC_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return i_data.extractToRight<INT_CQ_IC_BAR_PAGE_SIZE_64K,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_IC_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]

//>> GET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]
static inline bool GET_INT_CQ_IC_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return i_data.getBit<INT_CQ_IC_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_IC_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_IC_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_IC_BAR_ADDR_8_42]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_ADDR_8_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_IC_BAR_ADDR_8_42,
           INT_CQ_IC_BAR_ADDR_8_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_IC_BAR_ADDR_8_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_ADDR_8_42]

//>> SET_[INT_CQ_IC_BAR_ADDR_8_42]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_IC_BAR_ADDR_8_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_IC_BAR_ADDR_8_42,
           INT_CQ_IC_BAR_ADDR_8_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_IC_BAR_ADDR_8_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_IC_BAR_ADDR_8_42]

//>> GET_[INT_CQ_IC_BAR_ADDR_8_42]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_IC_BAR_ADDR_8_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_IC_BAR));
#endif
    return i_data.extractToRight<INT_CQ_IC_BAR_ADDR_8_42,
           INT_CQ_IC_BAR_ADDR_8_42_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_IC_BAR_ADDR_8_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_IC_BAR_ADDR_8_42]

//>> PREP_[INT_CQ_PMC_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PMC_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_PMC_4]

//>> GET_[INT_CQ_PMC_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PMC_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_4;
#endif
    return fapi2::getScom(i_target, INT_CQ_PMC_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_PMC_4]

//>> PUT_[INT_CQ_PMC_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PMC_4(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_4));
#endif
    return fapi2::putScom(i_target, INT_CQ_PMC_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_PMC_4]


//>> SET_[INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_4));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47,
           INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47]

//>> SET_[INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_4));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47,
           INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47]

//>> GET_[INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_4));
#endif
    return i_data.extractToRight<INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47,
           INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PMC_4_INT_CQ_PMC_4_COUNT_0_47]

//>> PREP_[INT_PC_NXC_REGS_RECOV_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_RECOV_ERR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_RECOV_ERR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_RECOV_ERR]

//>> GET_[INT_PC_NXC_REGS_RECOV_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_RECOV_ERR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_RECOV_ERR;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_RECOV_ERR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_RECOV_ERR]

//>> PUT_[INT_PC_NXC_REGS_RECOV_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_RECOV_ERR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_RECOV_ERR));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_RECOV_ERR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_RECOV_ERR]


//>> SET_[INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_RECOV_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR,
           INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR]

//>> SET_[INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_RECOV_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR,
           INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR]

//>> GET_[INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_RECOV_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR,
           INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_RECOV_ERR_INT_PC_NXC_RECOV_ERR_ERROR]

//>> PREP_[INT_PC_NXC_REGS_WATCH2_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH2_DATA0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH2_DATA0]

//>> GET_[INT_PC_NXC_REGS_WATCH2_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH2_DATA0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA0;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH2_DATA0]

//>> PUT_[INT_PC_NXC_REGS_WATCH2_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH2_DATA0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH2_DATA0));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH2_DATA0]


//>> PREP_[INT_PC_NXC_REGS_WOF_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WOF_ERR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WOF_ERR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WOF_ERR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WOF_ERR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WOF_ERR;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WOF_ERR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR]

//>> PUT_[INT_PC_NXC_REGS_WOF_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WOF_ERR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WOF_ERR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WOF_ERR]


//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_0]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_SCRUB_WB_CREDIT_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_P0_PTAG_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_PTAG_IN_USE_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SYNC_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_TAG_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_STATE_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_WB_CREDIT_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_UNLOCK_FIFO_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_12_13]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P0_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_RESERVED_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_15]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_RESERVED_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_16]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_AIB_CREDIT_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_18_19]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_REPLAY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_RESERVED_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_RESERVED_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_22]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_CACHE_IDX_MATCH]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_DATA_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PTAG_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_ATX_CREDIT_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_OS_NVP_PRIO_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_CHKOUT_PRIV_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_SW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_P1_PROC_HW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_UNDERFLOW]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_OVERFLOW]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_SRAM_ECC_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_LD_CRD_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_37_52]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_REGS_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_NXC_PARITY_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_SYNC_POLL_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_OVERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_FLUSH_POLL_UNDERFLOW_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60,
           INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_RESERVED_59_60]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_PROTOCOL_ERROR]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_UE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]

//>> SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]

//>> CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]

//>> GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]
static inline bool GET_INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WOF_ERR));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WOF_ERR_WATCH_DATA_CE]

//>> PREP_[INT_PC_REGS_AT_KILL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_AT_KILL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AT_KILL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_AT_KILL]

//>> GET_[INT_PC_REGS_AT_KILL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_AT_KILL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AT_KILL;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_AT_KILL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL]

//>> PUT_[INT_PC_REGS_AT_KILL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_AT_KILL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_AT_KILL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_AT_KILL]


//>> SET_[INT_PC_REGS_AT_KILL_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_VALID]

//>> SET_[INT_PC_REGS_AT_KILL_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_VALID]

//>> SET_[INT_PC_REGS_AT_KILL_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.setBit<INT_PC_REGS_AT_KILL_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_VALID]

//>> CLEAR_[INT_PC_REGS_AT_KILL_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_AT_KILL_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.clearBit<INT_PC_REGS_AT_KILL_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_AT_KILL_VALID]

//>> GET_[INT_PC_REGS_AT_KILL_VALID]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_VALID]

//>> GET_[INT_PC_REGS_AT_KILL_VALID]
static inline bool GET_INT_PC_REGS_AT_KILL_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return i_data.getBit<INT_PC_REGS_AT_KILL_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_VALID]

//>> SET_[INT_PC_REGS_AT_KILL_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_VSD_TYPE,
           INT_PC_REGS_AT_KILL_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_VSD_TYPE]

//>> SET_[INT_PC_REGS_AT_KILL_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_VSD_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_VSD_TYPE,
           INT_PC_REGS_AT_KILL_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_VSD_TYPE]

//>> GET_[INT_PC_REGS_AT_KILL_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_VSD_TYPE,
           INT_PC_REGS_AT_KILL_VSD_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_VSD_TYPE]

//>> SET_[INT_PC_REGS_AT_KILL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_BLOCKID,
           INT_PC_REGS_AT_KILL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_BLOCKID]

//>> SET_[INT_PC_REGS_AT_KILL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_BLOCKID,
           INT_PC_REGS_AT_KILL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_BLOCKID]

//>> GET_[INT_PC_REGS_AT_KILL_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_BLOCKID,
           INT_PC_REGS_AT_KILL_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_BLOCKID]

//>> SET_[INT_PC_REGS_AT_KILL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_OFFSET,
           INT_PC_REGS_AT_KILL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_OFFSET]

//>> SET_[INT_PC_REGS_AT_KILL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_OFFSET,
           INT_PC_REGS_AT_KILL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_OFFSET]

//>> GET_[INT_PC_REGS_AT_KILL_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_OFFSET,
           INT_PC_REGS_AT_KILL_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_OFFSET]

//>> SET_[INT_PC_REGS_AT_KILL_RESERVED_61_63]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_RESERVED_61_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_RESERVED_61_63,
           INT_PC_REGS_AT_KILL_RESERVED_61_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_RESERVED_61_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_RESERVED_61_63]

//>> SET_[INT_PC_REGS_AT_KILL_RESERVED_61_63]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_RESERVED_61_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_RESERVED_61_63,
           INT_PC_REGS_AT_KILL_RESERVED_61_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_RESERVED_61_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_RESERVED_61_63]

//>> GET_[INT_PC_REGS_AT_KILL_RESERVED_61_63]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_RESERVED_61_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_RESERVED_61_63,
           INT_PC_REGS_AT_KILL_RESERVED_61_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_RESERVED_61_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_RESERVED_61_63]

//>> PREP_[INT_PC_REGS_AT_KILL_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_AT_KILL_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AT_KILL_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_AT_KILL_MASK]

//>> GET_[INT_PC_REGS_AT_KILL_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_AT_KILL_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AT_KILL_MASK;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_AT_KILL_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_MASK]

//>> PUT_[INT_PC_REGS_AT_KILL_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_AT_KILL_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_AT_KILL_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_AT_KILL_MASK]


//>> SET_[INT_PC_REGS_AT_KILL_MASK_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_VSD_TYPE,
           INT_PC_REGS_AT_KILL_MASK_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_VSD_TYPE]

//>> SET_[INT_PC_REGS_AT_KILL_MASK_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_VSD_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_VSD_TYPE,
           INT_PC_REGS_AT_KILL_MASK_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_VSD_TYPE]

//>> GET_[INT_PC_REGS_AT_KILL_MASK_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_MASK_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_MASK_VSD_TYPE,
           INT_PC_REGS_AT_KILL_MASK_VSD_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_MASK_VSD_TYPE]

//>> SET_[INT_PC_REGS_AT_KILL_MASK_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_BLOCKID,
           INT_PC_REGS_AT_KILL_MASK_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_BLOCKID]

//>> SET_[INT_PC_REGS_AT_KILL_MASK_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_BLOCKID,
           INT_PC_REGS_AT_KILL_MASK_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_BLOCKID]

//>> GET_[INT_PC_REGS_AT_KILL_MASK_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_MASK_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_MASK_BLOCKID,
           INT_PC_REGS_AT_KILL_MASK_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_MASK_BLOCKID]

//>> SET_[INT_PC_REGS_AT_KILL_MASK_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_OFFSET,
           INT_PC_REGS_AT_KILL_MASK_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_OFFSET]

//>> SET_[INT_PC_REGS_AT_KILL_MASK_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_OFFSET,
           INT_PC_REGS_AT_KILL_MASK_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_OFFSET]

//>> GET_[INT_PC_REGS_AT_KILL_MASK_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_MASK_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_MASK_OFFSET,
           INT_PC_REGS_AT_KILL_MASK_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_MASK_OFFSET]

//>> SET_[INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63,
           INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63]

//>> SET_[INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63,
           INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63]

//>> GET_[INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AT_KILL_MASK));
#endif
    return i_data.extractToRight<INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63,
           INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AT_KILL_MASK_RESERVED_61_63]

//>> PREP_[INT_PC_REGS_DBG_ECC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_DBG_ECC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_ECC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_DBG_ECC]

//>> GET_[INT_PC_REGS_DBG_ECC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_DBG_ECC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_ECC;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_DBG_ECC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC]

//>> PUT_[INT_PC_REGS_DBG_ECC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_DBG_ECC(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_DBG_ECC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_DBG_ECC]


//>> SET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_CRESP_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR,
           INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR,
           INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR,
           INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ARX_DAT_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ARX_TAG_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_LDST_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_RSP_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_LCL_QUEUE_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_AVX_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_ST_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_BAR_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_AT_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_MMIO_PEND_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_TCTXT_LD_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_NRQ_RMT_QUEUE_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]

//>> GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]
static inline bool GET_INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_DIS_ATX_CTAG_ECC_CORR]

//>> SET_[INT_PC_REGS_DBG_ECC_RESERVED_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_RESERVED_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_RESERVED_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_RESERVED_15]

//>> SET_[INT_PC_REGS_DBG_ECC_RESERVED_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_RESERVED_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_RESERVED_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_RESERVED_15]

//>> SET_[INT_PC_REGS_DBG_ECC_RESERVED_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_RESERVED_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_RESERVED_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_RESERVED_15]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_RESERVED_15]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_RESERVED_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_RESERVED_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_RESERVED_15]

//>> GET_[INT_PC_REGS_DBG_ECC_RESERVED_15]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_RESERVED_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_RESERVED_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_RESERVED_15]

//>> GET_[INT_PC_REGS_DBG_ECC_RESERVED_15]
static inline bool GET_INT_PC_REGS_DBG_ECC_RESERVED_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_RESERVED_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_RESERVED_15]

//>> SET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]

//>> GET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]

//>> GET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]
static inline bool GET_INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]

//>> GET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]

//>> GET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]
static inline bool GET_INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_PC_REGS_DBG_ECC_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_RESERVED_18_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_RESERVED_18_19,
           INT_PC_REGS_DBG_ECC_RESERVED_18_19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_18_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_RESERVED_18_19]

//>> SET_[INT_PC_REGS_DBG_ECC_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_RESERVED_18_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_RESERVED_18_19,
           INT_PC_REGS_DBG_ECC_RESERVED_18_19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_18_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_RESERVED_18_19]

//>> GET_[INT_PC_REGS_DBG_ECC_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_RESERVED_18_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_RESERVED_18_19,
           INT_PC_REGS_DBG_ECC_RESERVED_18_19_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_RESERVED_18_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_RESERVED_18_19]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ARX_TAG_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CRESP_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_RSP_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_LCL_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_ST_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_NXC_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_BAR_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AT_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_AIB]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_PEND_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_TCTXT_LD_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]
static inline bool GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_CMD_NRQ_RMT_SRAM]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA]

//>> GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA,
           INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ARY_SELECT_ATX_CTAG_SSA]

//>> SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]

//>> SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]

//>> SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]

//>> GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]

//>> GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]
static inline bool GET_INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_REQ_IDLE]

//>> SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]

//>> SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]

//>> SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]

//>> CLEAR_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]

//>> GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]

//>> GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]
static inline bool GET_INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ECC));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ECC_ATX_AIB_ARB_IDLE]

//>> PREP_[INT_PC_REGS_DBG_TMOT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_DBG_TMOT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_TMOT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_DBG_TMOT]

//>> GET_[INT_PC_REGS_DBG_TMOT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_DBG_TMOT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_TMOT;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_DBG_TMOT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TMOT]

//>> PUT_[INT_PC_REGS_DBG_TMOT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_DBG_TMOT(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_DBG_TMOT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_DBG_TMOT]


//>> SET_[INT_PC_REGS_DBG_TMOT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_RESERVED_0_1,
           INT_PC_REGS_DBG_TMOT_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_RESERVED_0_1]

//>> SET_[INT_PC_REGS_DBG_TMOT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_RESERVED_0_1,
           INT_PC_REGS_DBG_TMOT_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_RESERVED_0_1]

//>> GET_[INT_PC_REGS_DBG_TMOT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_TMOT_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_TMOT_RESERVED_0_1,
           INT_PC_REGS_DBG_TMOT_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TMOT_RESERVED_0_1]

//>> SET_[INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT,
           INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT]

//>> SET_[INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT,
           INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT]

//>> GET_[INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT,
           INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TMOT_ARX_TIMEOUT]

//>> SET_[INT_PC_REGS_DBG_TMOT_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_RESERVED_8_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_RESERVED_8_9,
           INT_PC_REGS_DBG_TMOT_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_RESERVED_8_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_RESERVED_8_9]

//>> SET_[INT_PC_REGS_DBG_TMOT_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_RESERVED_8_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_RESERVED_8_9,
           INT_PC_REGS_DBG_TMOT_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_RESERVED_8_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_RESERVED_8_9]

//>> GET_[INT_PC_REGS_DBG_TMOT_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_TMOT_RESERVED_8_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_TMOT_RESERVED_8_9,
           INT_PC_REGS_DBG_TMOT_RESERVED_8_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_RESERVED_8_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TMOT_RESERVED_8_9]

//>> SET_[INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT,
           INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT]

//>> SET_[INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT,
           INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT]

//>> GET_[INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TMOT));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT,
           INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TMOT_MMIO_LDST_TIMEOUT]

//>> PREP_[INT_PC_REGS_TCTXT_LSI_SET_00]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_LSI_SET_00(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_LSI_SET_00;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_TCTXT_LSI_SET_00]

//>> GET_[INT_PC_REGS_TCTXT_LSI_SET_00]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_LSI_SET_00(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_LSI_SET_00;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_LSI_SET_00, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_LSI_SET_00]

//>> PUT_[INT_PC_REGS_TCTXT_LSI_SET_00]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_LSI_SET_00(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_LSI_SET_00));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_LSI_SET_00, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_TCTXT_LSI_SET_00]


//>> PREP_[INT_VC_AIB_TX_CMD_PRIORITY]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_AIB_TX_CMD_PRIORITY(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AIB_TX_CMD_PRIORITY;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_AIB_TX_CMD_PRIORITY]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_AIB_TX_CMD_PRIORITY(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AIB_TX_CMD_PRIORITY;
#endif
    return fapi2::getScom(i_target, INT_VC_AIB_TX_CMD_PRIORITY, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY]

//>> PUT_[INT_VC_AIB_TX_CMD_PRIORITY]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_AIB_TX_CMD_PRIORITY(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return fapi2::putScom(i_target, INT_VC_AIB_TX_CMD_PRIORITY, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_AIB_TX_CMD_PRIORITY]


//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43,
           INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43,
           INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43,
           INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_RESERVED_32_43]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_REGS]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ERQ]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_EAS]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_SYNC_DONE]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_EOI_RESP]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ESBC_DMA]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_CI_STORE]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_EOI_INT_EQP]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_NXC_CI_LOAD]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA]

//>> SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA]

//>> GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_CMD_PRIORITY));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA,
           INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_CMD_PRIORITY_ATX_PRIO_FOR_ENDC_DMA]

//>> PREP_[INT_VC_ENDC_CFG_CMD_LIMIT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_CFG_CMD_LIMIT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_CFG_CMD_LIMIT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_CFG_CMD_LIMIT]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_CFG_CMD_LIMIT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_CFG_CMD_LIMIT;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_CFG_CMD_LIMIT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT]

//>> PUT_[INT_VC_ENDC_CFG_CMD_LIMIT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_CFG_CMD_LIMIT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_CFG_CMD_LIMIT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_CFG_CMD_LIMIT]


//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1,
           INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1,
           INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1,
           INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_0_1]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_POOL_CI_STORE]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_OS]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_OS]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_POOL]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_POOL]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD,
           INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RSD_CRD_TRIG_FWD_TO_HARD]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD,
           INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CRD_CI_STORE_HARD]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33,
           INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33,
           INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33,
           INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_RESERVED_32_33]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST,
           INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST,
           INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST,
           INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_INT_REQUEST]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST,
           INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST,
           INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST,
           INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_EQ_POST]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD,
           INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD,
           INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD,
           INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_CI_LOAD]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ,
           INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ,
           INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ,
           INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_READ]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE,
           INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE]

//>> SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE,
           INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE]

//>> GET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE,
           INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CMD_LIMIT_END_DMA_WRITE]

//>> PREP_[INT_VC_ENDC_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_FLUSH_POLL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_FLUSH_POLL]

//>> GET_[INT_VC_ENDC_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_FLUSH_POLL;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_FLUSH_POLL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_FLUSH_POLL]

//>> PUT_[INT_VC_ENDC_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_FLUSH_POLL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_FLUSH_POLL]


//>> SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3,
           INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3,
           INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3]

//>> GET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3,
           INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_0_3]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_BLOCKID,
           INT_VC_ENDC_FLUSH_POLL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_BLOCKID,
           INT_VC_ENDC_FLUSH_POLL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID]

//>> GET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_FLUSH_POLL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ENDC_FLUSH_POLL_BLOCKID,
           INT_VC_ENDC_FLUSH_POLL_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_OFFSET,
           INT_VC_ENDC_FLUSH_POLL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_OFFSET,
           INT_VC_ENDC_FLUSH_POLL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET]

//>> GET_[INT_VC_ENDC_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_FLUSH_POLL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ENDC_FLUSH_POLL_OFFSET,
           INT_VC_ENDC_FLUSH_POLL_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_FLUSH_POLL_OFFSET]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35,
           INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35,
           INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35]

//>> GET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35,
           INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_FLUSH_POLL_RESERVED_32_35]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK,
           INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK,
           INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK]

//>> GET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK,
           INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_FLUSH_POLL_BLOCKID_MASK]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK,
           INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK]

//>> SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK,
           INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK]

//>> GET_[INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK,
           INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_FLUSH_POLL_OFFSET_MASK]

//>> PREP_[INT_VC_ENDC_PERF_EVENT_SEL_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_PERF_EVENT_SEL_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_PERF_EVENT_SEL_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_PERF_EVENT_SEL_4]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_PERF_EVENT_SEL_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_PERF_EVENT_SEL_4;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_PERF_EVENT_SEL_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4]

//>> PUT_[INT_VC_ENDC_PERF_EVENT_SEL_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_PERF_EVENT_SEL_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_PERF_EVENT_SEL_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_PERF_EVENT_SEL_4]


//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_NXC_TEND]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_TCTXT_LD]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_TCTXT_LD]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_AUTOGEN_SETPQ00]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_AUTOGEN_SETPQ00]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_TRU_ESBC]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_END_FETCH_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_EQ_POST_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_INT_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_CI_STORE_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESC_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_REMOTE_ESC_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_NXC_LD_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_LOCAL_ESBC_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY,
           INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_SOFT_LOAD_RESP_REPLAY]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE,
           INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE]

//>> SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE,
           INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE]

//>> GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE,
           INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_PERF_EVENT_SEL_4_PROC_UPDATE]

//>> PREP_[INT_VC_ENDC_WATCH1_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH1_DATA2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH1_DATA2]

//>> GET_[INT_VC_ENDC_WATCH1_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH1_DATA2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA2;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH1_DATA2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH1_DATA2]

//>> PUT_[INT_VC_ENDC_WATCH1_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH1_DATA2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH1_DATA2));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH1_DATA2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH1_DATA2]


//>> PREP_[INT_VC_ESB_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ESB_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESB_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ESB_BLOCK_MODE]

//>> GET_[INT_VC_ESB_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ESB_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESB_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_VC_ESB_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ESB_BLOCK_MODE]

//>> PUT_[INT_VC_ESB_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ESB_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ESB_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_VC_ESB_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ESB_BLOCK_MODE]


//>> SET_[INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESB_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE,
           INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE]

//>> SET_[INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESB_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE,
           INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE]

//>> GET_[INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESB_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE,
           INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESB_BLOCK_MODE_INT_VC_ESB_BLOCK_MODE]

//>> PREP_[INT_VC_NVPG_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_NVPG_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_NVPG_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_NVPG_BLOCK_MODE]

//>> GET_[INT_VC_NVPG_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_NVPG_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_NVPG_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_VC_NVPG_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_NVPG_BLOCK_MODE]

//>> PUT_[INT_VC_NVPG_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_NVPG_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_NVPG_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_VC_NVPG_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_NVPG_BLOCK_MODE]


//>> SET_[INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_NVPG_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE,
           INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE]

//>> SET_[INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_NVPG_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE,
           INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE]

//>> GET_[INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_NVPG_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE,
           INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_NVPG_BLOCK_MODE_INT_VC_NVPG_BLOCK_MODE]

//>> PREP_[INT_VC_QUEUES_CFG_REM_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_CFG_REM_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_CFG_REM_3]

//>> GET_[INT_VC_QUEUES_CFG_REM_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_CFG_REM_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_3;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_CFG_REM_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3]

//>> PUT_[INT_VC_QUEUES_CFG_REM_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_CFG_REM_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_CFG_REM_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_CFG_REM_3]


//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_IRQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_ERQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]
static inline bool GET_INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_3));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_3_ERQ_CFG_UPD_PND]

//>> PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_PERF_EVENT_SEL_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_0]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_PERF_EVENT_SEL_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_0;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0]

//>> PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_PERF_EVENT_SEL_0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_0]


//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_0_EQA_TO_ENDC]

//>> PREP_[MCD_BANK0_STR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_BANK0_STR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_STR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_BANK0_STR]

//>> GET_[MCD_BANK0_STR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_BANK0_STR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_STR;
#endif
    return fapi2::getScom(i_target, MCD_BANK0_STR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_BANK0_STR]

//>> PUT_[MCD_BANK0_STR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_BANK0_STR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return fapi2::putScom(i_target, MCD_BANK0_STR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_BANK0_STR]


//>> SET_[MCD_BANK0_STR_VALID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_STR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_VALID]

//>> SET_[MCD_BANK0_STR_VALID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_STR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_VALID]

//>> SET_[MCD_BANK0_STR_VALID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.setBit<MCD_BANK0_STR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_STR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_VALID]

//>> CLEAR_[MCD_BANK0_STR_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_STR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.clearBit<MCD_BANK0_STR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_STR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_STR_VALID]

//>> GET_[MCD_BANK0_STR_VALID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_STR_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.extractToRight<MCD_BANK0_STR_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_STR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_VALID]

//>> GET_[MCD_BANK0_STR_VALID]
static inline bool GET_MCD_BANK0_STR_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.getBit<MCD_BANK0_STR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_STR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_VALID]

//>> SET_[MCD_BANK0_STR_CPG]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_CPG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_CPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_STR_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_CPG]

//>> SET_[MCD_BANK0_STR_CPG]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_CPG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_CPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_STR_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_CPG]

//>> SET_[MCD_BANK0_STR_CPG]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_CPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.setBit<MCD_BANK0_STR_CPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_STR_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_CPG]

//>> CLEAR_[MCD_BANK0_STR_CPG]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_STR_CPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.clearBit<MCD_BANK0_STR_CPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_STR_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_STR_CPG]

//>> GET_[MCD_BANK0_STR_CPG]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_STR_CPG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.extractToRight<MCD_BANK0_STR_CPG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_STR_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_CPG]

//>> GET_[MCD_BANK0_STR_CPG]
static inline bool GET_MCD_BANK0_STR_CPG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.getBit<MCD_BANK0_STR_CPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_STR_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_CPG]

//>> SET_[MCD_BANK0_STR_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_GRP_MBR_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_GRP_MBR_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_STR_GRP_MBR_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_GRP_MBR_ID]

//>> SET_[MCD_BANK0_STR_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_GRP_MBR_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_GRP_MBR_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_STR_GRP_MBR_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_GRP_MBR_ID]

//>> SET_[MCD_BANK0_STR_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_GRP_MBR_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.setBit<MCD_BANK0_STR_GRP_MBR_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_STR_GRP_MBR_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_GRP_MBR_ID]

//>> CLEAR_[MCD_BANK0_STR_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_STR_GRP_MBR_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.clearBit<MCD_BANK0_STR_GRP_MBR_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_STR_GRP_MBR_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_STR_GRP_MBR_ID]

//>> GET_[MCD_BANK0_STR_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_STR_GRP_MBR_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.extractToRight<MCD_BANK0_STR_GRP_MBR_ID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_STR_GRP_MBR_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_GRP_MBR_ID]

//>> GET_[MCD_BANK0_STR_GRP_MBR_ID]
static inline bool GET_MCD_BANK0_STR_GRP_MBR_ID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.getBit<MCD_BANK0_STR_GRP_MBR_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_STR_GRP_MBR_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_GRP_MBR_ID]

//>> SET_[MCD_BANK0_STR_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_ALWAYS_RTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_ALWAYS_RTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_STR_ALWAYS_RTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_ALWAYS_RTY]

//>> SET_[MCD_BANK0_STR_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_ALWAYS_RTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_ALWAYS_RTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_STR_ALWAYS_RTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_ALWAYS_RTY]

//>> SET_[MCD_BANK0_STR_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_ALWAYS_RTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.setBit<MCD_BANK0_STR_ALWAYS_RTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_STR_ALWAYS_RTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_ALWAYS_RTY]

//>> CLEAR_[MCD_BANK0_STR_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_STR_ALWAYS_RTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.clearBit<MCD_BANK0_STR_ALWAYS_RTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_STR_ALWAYS_RTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_STR_ALWAYS_RTY]

//>> GET_[MCD_BANK0_STR_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_STR_ALWAYS_RTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.extractToRight<MCD_BANK0_STR_ALWAYS_RTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_STR_ALWAYS_RTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_ALWAYS_RTY]

//>> GET_[MCD_BANK0_STR_ALWAYS_RTY]
static inline bool GET_MCD_BANK0_STR_ALWAYS_RTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.getBit<MCD_BANK0_STR_ALWAYS_RTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_STR_ALWAYS_RTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_ALWAYS_RTY]

//>> SET_[MCD_BANK0_STR_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_STR_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_SMF_ENABLE]

//>> SET_[MCD_BANK0_STR_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_SMF_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_STR_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_SMF_ENABLE]

//>> SET_[MCD_BANK0_STR_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.setBit<MCD_BANK0_STR_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_STR_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_SMF_ENABLE]

//>> CLEAR_[MCD_BANK0_STR_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_STR_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.clearBit<MCD_BANK0_STR_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_STR_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_STR_SMF_ENABLE]

//>> GET_[MCD_BANK0_STR_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_STR_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.extractToRight<MCD_BANK0_STR_SMF_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_STR_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_SMF_ENABLE]

//>> GET_[MCD_BANK0_STR_SMF_ENABLE]
static inline bool GET_MCD_BANK0_STR_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.getBit<MCD_BANK0_STR_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_STR_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_SMF_ENABLE]

//>> SET_[MCD_BANK0_STR_GRP_SIZE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_GRP_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_GRP_SIZE,
           MCD_BANK0_STR_GRP_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_STR_GRP_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_GRP_SIZE]

//>> SET_[MCD_BANK0_STR_GRP_SIZE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_GRP_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_GRP_SIZE,
           MCD_BANK0_STR_GRP_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_STR_GRP_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_GRP_SIZE]

//>> GET_[MCD_BANK0_STR_GRP_SIZE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_STR_GRP_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.extractToRight<MCD_BANK0_STR_GRP_SIZE,
           MCD_BANK0_STR_GRP_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_STR_GRP_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_GRP_SIZE]

//>> SET_[MCD_BANK0_STR_GRP_BASE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_GRP_BASE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_GRP_BASE,
           MCD_BANK0_STR_GRP_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_STR_GRP_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_GRP_BASE]

//>> SET_[MCD_BANK0_STR_GRP_BASE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_STR_GRP_BASE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return o_data.insertFromRight<MCD_BANK0_STR_GRP_BASE,
           MCD_BANK0_STR_GRP_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_STR_GRP_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_STR_GRP_BASE]

//>> GET_[MCD_BANK0_STR_GRP_BASE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_STR_GRP_BASE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_STR));
#endif
    return i_data.extractToRight<MCD_BANK0_STR_GRP_BASE,
           MCD_BANK0_STR_GRP_BASE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_STR_GRP_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_STR_GRP_BASE]

//>> PREP_[NX_CH4_ADDR_8_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_CH4_ADDR_8_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_8_HASH_FUNCTION_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_CH4_ADDR_8_HASH_FUNCTION_REG]

//>> GET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_CH4_ADDR_8_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_8_HASH_FUNCTION_REG;
#endif
    return fapi2::getScom(i_target, NX_CH4_ADDR_8_HASH_FUNCTION_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG]

//>> PUT_[NX_CH4_ADDR_8_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_CH4_ADDR_8_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_8_HASH_FUNCTION_REG));
#endif
    return fapi2::putScom(i_target, NX_CH4_ADDR_8_HASH_FUNCTION_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_CH4_ADDR_8_HASH_FUNCTION_REG]


//>> SET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_8_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION,
           NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION]

//>> SET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_8_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION,
           NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION]

//>> GET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& GET_NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_8_HASH_FUNCTION_REG));
#endif
    return i_data.extractToRight<NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION,
           NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_CH4_ADDR_8_HASH_FUNCTION_REG_ADDRESS_8_HASH_FUNCTION]

//>> PREP_[NX_DBG_TRIGGER_CTRL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DBG_TRIGGER_CTRL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_TRIGGER_CTRL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_DBG_TRIGGER_CTRL]

//>> GET_[NX_DBG_TRIGGER_CTRL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DBG_TRIGGER_CTRL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_TRIGGER_CTRL;
#endif
    return fapi2::getScom(i_target, NX_DBG_TRIGGER_CTRL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_DBG_TRIGGER_CTRL]

//>> PUT_[NX_DBG_TRIGGER_CTRL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DBG_TRIGGER_CTRL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DBG_TRIGGER_CTRL));
#endif
    return fapi2::putScom(i_target, NX_DBG_TRIGGER_CTRL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_DBG_TRIGGER_CTRL]


//>> SET_[NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS]
static inline fapi2::buffer<uint64_t>& SET_NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_TRIGGER_CTRL));
#endif
    return o_data.insertFromRight<NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS,
           NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS]

//>> SET_[NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS]
static inline fapi2::buffer<uint64_t>& SET_NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_TRIGGER_CTRL));
#endif
    return o_data.insertFromRight<NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS,
           NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS]

//>> GET_[NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS]
static inline fapi2::buffer<uint64_t>& GET_NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_TRIGGER_CTRL));
#endif
    return i_data.extractToRight<NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS,
           NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DBG_TRIGGER_CTRL_NX_TRIGGER_CTRL_BITS]

//>> PREP_[NX_DMA_GZIP_MAX_BYTE_CNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_GZIP_MAX_BYTE_CNT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_GZIP_MAX_BYTE_CNT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_DMA_GZIP_MAX_BYTE_CNT]

//>> GET_[NX_DMA_GZIP_MAX_BYTE_CNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_GZIP_MAX_BYTE_CNT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_GZIP_MAX_BYTE_CNT;
#endif
    return fapi2::getScom(i_target, NX_DMA_GZIP_MAX_BYTE_CNT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_DMA_GZIP_MAX_BYTE_CNT]

//>> PUT_[NX_DMA_GZIP_MAX_BYTE_CNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_GZIP_MAX_BYTE_CNT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return fapi2::putScom(i_target, NX_DMA_GZIP_MAX_BYTE_CNT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_DMA_GZIP_MAX_BYTE_CNT]


//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW,
           NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW,
           NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW]

//>> GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW,
           NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_LOW]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH,
           NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH,
           NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH]

//>> GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH,
           NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_HIGH]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.setBit<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]

//>> CLEAR_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.clearBit<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]

//>> GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]

//>> GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]
static inline bool GET_NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return i_data.getBit<NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_GZIP_MAX_BYTE_CNT_BYTE_CNT_THRESHOLD]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT,
           NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT,
           NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT]

//>> GET_[NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT,
           NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_GZIP_MAX_BYTE_CNT_SRC_DDE_CNT]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT,
           NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT]

//>> SET_[NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT,
           NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT]

//>> GET_[NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_GZIP_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT,
           NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_GZIP_MAX_BYTE_CNT_TARGET_DDE_CNT]

//>> PREP_[NX_DMA_SYM_MAX_BYTE_CNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_SYM_MAX_BYTE_CNT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SYM_MAX_BYTE_CNT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_DMA_SYM_MAX_BYTE_CNT]

//>> GET_[NX_DMA_SYM_MAX_BYTE_CNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_SYM_MAX_BYTE_CNT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SYM_MAX_BYTE_CNT;
#endif
    return fapi2::getScom(i_target, NX_DMA_SYM_MAX_BYTE_CNT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_DMA_SYM_MAX_BYTE_CNT]

//>> PUT_[NX_DMA_SYM_MAX_BYTE_CNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_SYM_MAX_BYTE_CNT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return fapi2::putScom(i_target, NX_DMA_SYM_MAX_BYTE_CNT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_DMA_SYM_MAX_BYTE_CNT]


//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT]

//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT]

//>> GET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_BYTE_CNT_LIMIT]

//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT]

//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT]

//>> GET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_SRC_DDE_CNT]

//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT]

//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT]

//>> GET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT,
           NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SYM_MAX_BYTE_CNT_MAX_TARGET_DDE_CNT]

//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT,
           NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT]

//>> SET_[NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return o_data.insertFromRight<NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT,
           NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT]

//>> GET_[NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SYM_MAX_BYTE_CNT));
#endif
    return i_data.extractToRight<NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT,
           NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SYM_MAX_BYTE_CNT_LO_PRIOR_MAX_BYTE_CNT_LIMIT]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG(const fapi2::Target<K, M, V>&
        i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG(const fapi2::Target<K, M, V>&
        i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_VALID_BITS_FOR_ENTRIES_0_7]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL0_REG_TOPOID_XLAT_TBL_ENTRIES_00_07]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG(const fapi2::Target<K, M, V>&
        i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG(const fapi2::Target<K, M, V>&
        i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_VALID_BITS_FOR_ENTRIES_8_15]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL1_REG_TOPOID_XLAT_TBL_ENTRIES_08_15]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG(const fapi2::Target<K, M, V>&
        i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG(const fapi2::Target<K, M, V>&
        i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_VALID_BITS_FOR_ENTRIES_16_23]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL2_REG_TOPOID_XLAT_TBL_ENTRIES_16_23]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG(const fapi2::Target<K, M, V>&
        i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG(const fapi2::Target<K, M, V>&
        i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_VALID_BITS_FOR_ENTRIES_24_31]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_TOPOID_XLAT_TBL3_REG_TOPOID_XLAT_TBL_ENTRIES_24_31]

//>> PREP_[NX_PBI_RNG_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_RNG_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_RNG_CFG]

//>> GET_[NX_PBI_RNG_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_RNG_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_CFG;
#endif
    return fapi2::getScom(i_target, NX_PBI_RNG_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_RNG_CFG]

//>> PUT_[NX_PBI_RNG_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_RNG_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return fapi2::putScom(i_target, NX_PBI_RNG_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_RNG_CFG]


//>> SET_[NX_PBI_RNG_CFG_FAIL_REG]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_FAIL_REG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_FAIL_REG,
           NX_PBI_RNG_CFG_FAIL_REG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_FAIL_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_FAIL_REG]

//>> SET_[NX_PBI_RNG_CFG_FAIL_REG]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_FAIL_REG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_FAIL_REG,
           NX_PBI_RNG_CFG_FAIL_REG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_FAIL_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_FAIL_REG]

//>> GET_[NX_PBI_RNG_CFG_FAIL_REG]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_FAIL_REG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_FAIL_REG,
           NX_PBI_RNG_CFG_FAIL_REG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_FAIL_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_FAIL_REG]

//>> SET_[NX_PBI_RNG_CFG_RNG0_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_FAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG0_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG0_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_FAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG0_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG0_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RNG0_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_FAIL]

//>> CLEAR_[NX_PBI_RNG_CFG_RNG0_FAIL]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RNG0_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RNG0_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RNG0_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG0_FAIL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RNG0_FAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RNG0_FAIL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG0_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG0_FAIL]
static inline bool GET_NX_PBI_RNG_CFG_RNG0_FAIL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RNG0_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG0_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG1_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_FAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG1_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG1_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_FAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG1_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG1_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RNG1_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_FAIL]

//>> CLEAR_[NX_PBI_RNG_CFG_RNG1_FAIL]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RNG1_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RNG1_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RNG1_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG1_FAIL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RNG1_FAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RNG1_FAIL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG1_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG1_FAIL]
static inline bool GET_NX_PBI_RNG_CFG_RNG1_FAIL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RNG1_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG1_FAIL]

//>> SET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_INTERRUPT_SENT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_INTERRUPT_SENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_INTERRUPT_SENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]

//>> SET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_INTERRUPT_SENT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_INTERRUPT_SENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_INTERRUPT_SENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]

//>> SET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_INTERRUPT_SENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_INTERRUPT_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_INTERRUPT_SENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]

//>> CLEAR_[NX_PBI_RNG_CFG_INTERRUPT_SENT]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_INTERRUPT_SENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_INTERRUPT_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_INTERRUPT_SENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_INTERRUPT_SENT]

//>> GET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_INTERRUPT_SENT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_INTERRUPT_SENT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_INTERRUPT_SENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]

//>> GET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]
static inline bool GET_NX_PBI_RNG_CFG_INTERRUPT_SENT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_INTERRUPT_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_INTERRUPT_SENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_INTERRUPT_SENT]

//>> SET_[NX_PBI_RNG_CFG_BIST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_BIST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_BIST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_BIST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_BIST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_BIST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_BIST_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_BIST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_BIST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_BIST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_BIST_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_BIST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_BIST_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_BIST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_BIST_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_BIST_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_BIST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_BIST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_BIST_COMPLETE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_COMPLETE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_BIST_COMPLETE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_COMPLETE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_COMPLETE]

//>> SET_[NX_PBI_RNG_CFG_BIST_COMPLETE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_COMPLETE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_BIST_COMPLETE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_COMPLETE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_COMPLETE]

//>> SET_[NX_PBI_RNG_CFG_BIST_COMPLETE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_COMPLETE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_BIST_COMPLETE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_COMPLETE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_COMPLETE]

//>> CLEAR_[NX_PBI_RNG_CFG_BIST_COMPLETE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_BIST_COMPLETE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_BIST_COMPLETE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_COMPLETE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_BIST_COMPLETE]

//>> GET_[NX_PBI_RNG_CFG_BIST_COMPLETE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_BIST_COMPLETE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_BIST_COMPLETE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_COMPLETE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_BIST_COMPLETE]

//>> GET_[NX_PBI_RNG_CFG_BIST_COMPLETE]
static inline bool GET_NX_PBI_RNG_CFG_BIST_COMPLETE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_BIST_COMPLETE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_COMPLETE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_BIST_COMPLETE]

//>> SET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_BIST_FAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG0_BIST_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_BIST_FAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG0_BIST_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_BIST_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RNG0_BIST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]

//>> CLEAR_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RNG0_BIST_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RNG0_BIST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RNG0_BIST_FAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RNG0_BIST_FAIL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]
static inline bool GET_NX_PBI_RNG_CFG_RNG0_BIST_FAIL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RNG0_BIST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG0_BIST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_BIST_FAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG1_BIST_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_BIST_FAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG1_BIST_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_BIST_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RNG1_BIST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]

//>> CLEAR_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RNG1_BIST_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RNG1_BIST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RNG1_BIST_FAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RNG1_BIST_FAIL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]

//>> GET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]
static inline bool GET_NX_PBI_RNG_CFG_RNG1_BIST_FAIL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RNG1_BIST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_BIST_FAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG1_BIST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH,
           NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH]

//>> SET_[NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH,
           NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH]

//>> GET_[NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH,
           NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_BIST_BIT_FAIL_TH]

//>> SET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]

//>> SET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]

//>> SET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]

//>> CLEAR_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]

//>> GET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]

//>> GET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]
static inline bool GET_NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG0_INJ_CONTINOUS_ERROR]

//>> SET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]

//>> SET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]

//>> SET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]

//>> CLEAR_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]

//>> GET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]

//>> GET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]
static inline bool GET_NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG1_INJ_CONTINOUS_ERROR]

//>> SET_[NX_PBI_RNG_CFG_ST2_RESET_PERIOD]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ST2_RESET_PERIOD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_ST2_RESET_PERIOD,
           NX_PBI_RNG_CFG_ST2_RESET_PERIOD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_ST2_RESET_PERIOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ST2_RESET_PERIOD]

//>> SET_[NX_PBI_RNG_CFG_ST2_RESET_PERIOD]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ST2_RESET_PERIOD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_ST2_RESET_PERIOD,
           NX_PBI_RNG_CFG_ST2_RESET_PERIOD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_ST2_RESET_PERIOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ST2_RESET_PERIOD]

//>> GET_[NX_PBI_RNG_CFG_ST2_RESET_PERIOD]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_ST2_RESET_PERIOD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_ST2_RESET_PERIOD,
           NX_PBI_RNG_CFG_ST2_RESET_PERIOD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_ST2_RESET_PERIOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_ST2_RESET_PERIOD]

//>> SET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RRN_BYPASS_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_MASK_TOGGLE_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_SAMPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_SAMPTEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_SAMPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_SAMPTEST_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_SAMPTEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_SAMPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_SAMPTEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_SAMPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_SAMPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_SAMPTEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_SAMPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_SAMPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_SAMPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_SAMPTEST_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_SAMPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_SAMPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_SAMPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_SAMPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_SAMPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_REPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_REPTEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_REPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_REPTEST_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_REPTEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_REPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_REPTEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_REPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_REPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_REPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_REPTEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_REPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_REPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_REPTEST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_REPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_REPTEST_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_REPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_REPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_REPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_REPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_REPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_ADAPTEST_1BIT_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ADAPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_ADAPTEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ADAPTEST_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_ADAPTEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_ADAPTEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_ADAPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_ADAPTEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_ADAPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_ADAPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_ADAPTEST_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_ADAPTEST_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_ADAPTEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_ADAPTEST_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_ADAPTEST_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]

//>> CLEAR_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]

//>> GET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]

//>> GET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]
static inline bool GET_NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_COND_STARTUP_TEST_FAIL]

//>> SET_[NX_PBI_RNG_CFG_PACE_RATE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_PACE_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_PACE_RATE,
           NX_PBI_RNG_CFG_PACE_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_PACE_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_PACE_RATE]

//>> SET_[NX_PBI_RNG_CFG_PACE_RATE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_PACE_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_PACE_RATE,
           NX_PBI_RNG_CFG_PACE_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_PACE_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_PACE_RATE]

//>> GET_[NX_PBI_RNG_CFG_PACE_RATE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_PACE_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_PACE_RATE,
           NX_PBI_RNG_CFG_PACE_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_PACE_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_PACE_RATE]

//>> SET_[NX_PBI_RNG_CFG_RNG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_RNG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_CFG_RNG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG_ENABLE]

//>> SET_[NX_PBI_RNG_CFG_RNG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_CFG_RNG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.setBit<NX_PBI_RNG_CFG_RNG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_CFG_RNG_ENABLE]

//>> CLEAR_[NX_PBI_RNG_CFG_RNG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_CFG_RNG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return o_data.clearBit<NX_PBI_RNG_CFG_RNG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_CFG_RNG_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_RNG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_CFG_RNG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.extractToRight<NX_PBI_RNG_CFG_RNG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG_ENABLE]

//>> GET_[NX_PBI_RNG_CFG_RNG_ENABLE]
static inline bool GET_NX_PBI_RNG_CFG_RNG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_CFG));
#endif
    return i_data.getBit<NX_PBI_RNG_CFG_RNG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_CFG_RNG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_CFG_RNG_ENABLE]

//>> PREP_[NX_PBI_RNG_ST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_RNG_ST2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_RNG_ST2]

//>> GET_[NX_PBI_RNG_ST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_RNG_ST2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST2;
#endif
    return fapi2::getScom(i_target, NX_PBI_RNG_ST2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_RNG_ST2]

//>> PUT_[NX_PBI_RNG_ST2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_RNG_ST2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return fapi2::putScom(i_target, NX_PBI_RNG_ST2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_RNG_ST2]


//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0]

//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0]

//>> GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG0]

//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1]

//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1]

//>> GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_RRN_RNG1]

//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0]

//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0]

//>> GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG0]

//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1]

//>> SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1]

//>> GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1,
           NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST2_ADAPTEST_SOFT_FAIL_COUNT_CRN_RNG1]

//>> SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0,
           NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0]

//>> SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0,
           NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0]

//>> GET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0,
           NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG0]

//>> SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1,
           NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1]

//>> SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1,
           NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1]

//>> GET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST2));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1,
           NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST2_REPTEST_SOFT_FAIL_COUNT_RNG1]

//>> PREP_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB]

//>> PUT_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB]


//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.setBit<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> CLEAR_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.clearBit<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline bool GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.getBit<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> PREP_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL]

//>> PUT_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL]


//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]

//>> SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]

//>> GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX,
           NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]

//>> PREP_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR]

//>> PUT_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR]


//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_BAR_EFT_LO_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> PREP_[PB_COM_SCOM_EN1_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_CFG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CFG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_CFG3]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CFG3;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_CFG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3]

//>> PUT_[PB_COM_SCOM_EN1_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_CFG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_CFG3]


//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA6_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PA7_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL6_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_PBIASY_PTL7_SELCD]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG3_PB_CFG_SPARE2]

//>> PREP_[PB_COM_SCOM_EN1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_CR_ERROR]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR]

//>> PUT_[PB_COM_SCOM_EN1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_CR_ERROR]


//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP]

//>> SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP]

//>> GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CR_ERROR_FG_PRESP]

//>> PREP_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR]

//>> PUT_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR]


//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EN4_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_CFG1]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_CFG1;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1]

//>> PUT_[PB_COM_SCOM_EN4_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_CFG1]


//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3,
           PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX3]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_REG_RW]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_RW]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_REG_RW]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN4]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_CFG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CFG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_CFG3]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CFG3;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_CFG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_CFG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_CFG3]


//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG3_PB_CFG_SPARE2]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA]


//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTYPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TSIZE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_TTAG_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_CRESP_POLARITY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPA_SCOPE_EQ1]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX]


//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_A_PRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_B_PRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ1]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ1]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT]


//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ2]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR]


//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_CFG1]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_CFG1;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_CFG1]


//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA]


//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTYPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TSIZE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_TTAG_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_CRESP_POLARITY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPA_SCOPE_EQ7]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX]


//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_A_PRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_B_PRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ7]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR]


//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
