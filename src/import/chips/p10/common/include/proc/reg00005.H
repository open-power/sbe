/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00005.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00005_H_
#define __PROC_REG00005_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[INT_CQ_ERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_ERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_ERR_RPT_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_ERR_RPT_HOLD]

//>> GET_[INT_CQ_ERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_ERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_ERR_RPT_HOLD;
#endif
    return fapi2::getScom(i_target, INT_CQ_ERR_RPT_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_ERR_RPT_HOLD]

//>> PUT_[INT_CQ_ERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_ERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_RPT_HOLD));
#endif
    return fapi2::putScom(i_target, INT_CQ_ERR_RPT_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_ERR_RPT_HOLD]


//>> SET_[INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42,
           INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42]

//>> SET_[INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42,
           INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42]

//>> GET_[INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_RPT_HOLD));
#endif
    return i_data.extractToRight<INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42,
           INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_RPT_HOLD_INT_CQ_ERR_RPT_HOLD_0_42]

//>> PREP_[INT_CQ_ESB_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_ESB_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_ESB_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_ESB_BAR]

//>> GET_[INT_CQ_ESB_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_ESB_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_ESB_BAR;
#endif
    return fapi2::getScom(i_target, INT_CQ_ESB_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_ESB_BAR]

//>> PUT_[INT_CQ_ESB_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_ESB_BAR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return fapi2::putScom(i_target, INT_CQ_ESB_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_ESB_BAR]


//>> SET_[INT_CQ_ESB_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ESB_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_VALID]

//>> SET_[INT_CQ_ESB_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ESB_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_VALID]

//>> SET_[INT_CQ_ESB_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.setBit<INT_CQ_ESB_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_ESB_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_VALID]

//>> CLEAR_[INT_CQ_ESB_BAR_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_ESB_BAR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.clearBit<INT_CQ_ESB_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_ESB_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_ESB_BAR_VALID]

//>> GET_[INT_CQ_ESB_BAR_VALID]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ESB_BAR_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return i_data.extractToRight<INT_CQ_ESB_BAR_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ESB_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ESB_BAR_VALID]

//>> GET_[INT_CQ_ESB_BAR_VALID]
static inline bool GET_INT_CQ_ESB_BAR_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return i_data.getBit<INT_CQ_ESB_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_ESB_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ESB_BAR_VALID]

//>> SET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_PAGE_SIZE_64K,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ESB_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_PAGE_SIZE_64K(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_PAGE_SIZE_64K,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ESB_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.setBit<INT_CQ_ESB_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_ESB_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]

//>> CLEAR_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_ESB_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.clearBit<INT_CQ_ESB_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_ESB_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]

//>> GET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ESB_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return i_data.extractToRight<INT_CQ_ESB_BAR_PAGE_SIZE_64K,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ESB_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]

//>> GET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]
static inline bool GET_INT_CQ_ESB_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return i_data.getBit<INT_CQ_ESB_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_ESB_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ESB_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_ESB_BAR_ADDR_8_39]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_ADDR_8_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_ADDR_8_39,
           INT_CQ_ESB_BAR_ADDR_8_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ESB_BAR_ADDR_8_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_ADDR_8_39]

//>> SET_[INT_CQ_ESB_BAR_ADDR_8_39]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_ADDR_8_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_ADDR_8_39,
           INT_CQ_ESB_BAR_ADDR_8_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ESB_BAR_ADDR_8_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_ADDR_8_39]

//>> GET_[INT_CQ_ESB_BAR_ADDR_8_39]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ESB_BAR_ADDR_8_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return i_data.extractToRight<INT_CQ_ESB_BAR_ADDR_8_39,
           INT_CQ_ESB_BAR_ADDR_8_39_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ESB_BAR_ADDR_8_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ESB_BAR_ADDR_8_39]

//>> SET_[INT_CQ_ESB_BAR_SET_DIV_SEL_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_SET_DIV_SEL_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_SET_DIV_SEL_0_2,
           INT_CQ_ESB_BAR_SET_DIV_SEL_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ESB_BAR_SET_DIV_SEL_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_SET_DIV_SEL_0_2]

//>> SET_[INT_CQ_ESB_BAR_SET_DIV_SEL_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_SET_DIV_SEL_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_SET_DIV_SEL_0_2,
           INT_CQ_ESB_BAR_SET_DIV_SEL_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ESB_BAR_SET_DIV_SEL_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_SET_DIV_SEL_0_2]

//>> GET_[INT_CQ_ESB_BAR_SET_DIV_SEL_0_2]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ESB_BAR_SET_DIV_SEL_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return i_data.extractToRight<INT_CQ_ESB_BAR_SET_DIV_SEL_0_2,
           INT_CQ_ESB_BAR_SET_DIV_SEL_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ESB_BAR_SET_DIV_SEL_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ESB_BAR_SET_DIV_SEL_0_2]

//>> SET_[INT_CQ_ESB_BAR_RANGE_0_4]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_RANGE_0_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_RANGE_0_4,
           INT_CQ_ESB_BAR_RANGE_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ESB_BAR_RANGE_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_RANGE_0_4]

//>> SET_[INT_CQ_ESB_BAR_RANGE_0_4]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ESB_BAR_RANGE_0_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_ESB_BAR_RANGE_0_4,
           INT_CQ_ESB_BAR_RANGE_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ESB_BAR_RANGE_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ESB_BAR_RANGE_0_4]

//>> GET_[INT_CQ_ESB_BAR_RANGE_0_4]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ESB_BAR_RANGE_0_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ESB_BAR));
#endif
    return i_data.extractToRight<INT_CQ_ESB_BAR_RANGE_0_4,
           INT_CQ_ESB_BAR_RANGE_0_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ESB_BAR_RANGE_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ESB_BAR_RANGE_0_4]

//>> PREP_[INT_CQ_PMC_7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PMC_7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_PMC_7]

//>> GET_[INT_CQ_PMC_7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PMC_7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_7;
#endif
    return fapi2::getScom(i_target, INT_CQ_PMC_7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_PMC_7]

//>> PUT_[INT_CQ_PMC_7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PMC_7(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_7));
#endif
    return fapi2::putScom(i_target, INT_CQ_PMC_7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_PMC_7]


//>> SET_[INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_7));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47,
           INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47]

//>> SET_[INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_7));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47,
           INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47]

//>> GET_[INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_7));
#endif
    return i_data.extractToRight<INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47,
           INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PMC_7_INT_CQ_PMC_7_COUNT_0_47]

//>> PREP_[INT_PC_NXC_REGS_PROC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_PROC_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_PROC_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_PROC_CONFIG]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_PROC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_PROC_CONFIG;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_PROC_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG]

//>> PUT_[INT_PC_NXC_REGS_PROC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_PROC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_PROC_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_PROC_CONFIG]


//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN,
           INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN,
           INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN,
           INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_CACHE_WATCH_ASSIGN]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_4_7]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS,
           INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS,
           INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS,
           INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_ESC_REENABLE_PRIO_DIS]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]

//>> CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]
static inline bool GET_INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_PULL_FIRST_GRPSCAN_ENA]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]

//>> CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]
static inline bool GET_INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_LSMFB_SCAN_ALL_PRIO_ENA]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_18_20]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST,
           INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST,
           INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST,
           INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_REDIST]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]

//>> CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]
static inline bool GET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_24]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC,
           INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC,
           INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC,
           INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_TARGET_VC_QUEUE_ESC]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]

//>> CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]
static inline bool GET_INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_LOW_POWER_INTR_MODE]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_29_31]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS,
           INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS,
           INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS,
           INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVG_TABLE_COMPRESS]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS,
           INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS,
           INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS,
           INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_CFG_NVC_TABLE_COMPRESS]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47]

//>> SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47]

//>> GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PROC_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47,
           INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_PROC_CONFIG_RESERVED_40_47]

//>> PREP_[INT_PC_NXC_REGS_WATCH2_DATA3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH2_DATA3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH2_DATA3]

//>> GET_[INT_PC_NXC_REGS_WATCH2_DATA3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH2_DATA3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA3;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH2_DATA3]

//>> PUT_[INT_PC_NXC_REGS_WATCH2_DATA3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH2_DATA3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH2_DATA3));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH2_DATA3]


//>> PREP_[INT_PC_REGS_DBG_TRACE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_DBG_TRACE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_TRACE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_DBG_TRACE]

//>> GET_[INT_PC_REGS_DBG_TRACE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_DBG_TRACE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_TRACE;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_DBG_TRACE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TRACE]

//>> PUT_[INT_PC_REGS_DBG_TRACE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_DBG_TRACE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_DBG_TRACE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_DBG_TRACE]


//>> SET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TRACE_MMIO_PIPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TRACE_MMIO_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_MMIO_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]

//>> SET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TRACE_MMIO_PIPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TRACE_MMIO_PIPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_MMIO_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]

//>> SET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TRACE_MMIO_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_TRACE_MMIO_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_MMIO_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]

//>> CLEAR_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_TRACE_MMIO_PIPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_TRACE_MMIO_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_MMIO_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]

//>> GET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_TRACE_MMIO_PIPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_TRACE_MMIO_PIPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_MMIO_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]

//>> GET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]
static inline bool GET_INT_PC_REGS_DBG_TRACE_MMIO_PIPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_TRACE_MMIO_PIPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_MMIO_PIPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TRACE_MMIO_PIPE]

//>> SET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TRACE_ARB_NRQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TRACE_ARB_NRQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_ARB_NRQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]

//>> SET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TRACE_ARB_NRQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_TRACE_ARB_NRQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_ARB_NRQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]

//>> SET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_TRACE_ARB_NRQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.setBit<INT_PC_REGS_DBG_TRACE_ARB_NRQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_ARB_NRQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]

//>> CLEAR_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_DBG_TRACE_ARB_NRQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return o_data.clearBit<INT_PC_REGS_DBG_TRACE_ARB_NRQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_ARB_NRQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]

//>> GET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_TRACE_ARB_NRQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_TRACE_ARB_NRQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_ARB_NRQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]

//>> GET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]
static inline bool GET_INT_PC_REGS_DBG_TRACE_ARB_NRQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_TRACE));
#endif
    return i_data.getBit<INT_PC_REGS_DBG_TRACE_ARB_NRQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_DBG_TRACE_ARB_NRQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_TRACE_ARB_NRQ]

//>> PREP_[INT_PC_REGS_ERR0_RECOV]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_ERR0_RECOV(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR0_RECOV;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_ERR0_RECOV]

//>> GET_[INT_PC_REGS_ERR0_RECOV]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_ERR0_RECOV(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR0_RECOV;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_ERR0_RECOV, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_ERR0_RECOV]

//>> PUT_[INT_PC_REGS_ERR0_RECOV]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_ERR0_RECOV(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR0_RECOV));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_ERR0_RECOV, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_ERR0_RECOV]


//>> SET_[INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR0_RECOV));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR,
           INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR]

//>> SET_[INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR0_RECOV));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR,
           INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR]

//>> GET_[INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR0_RECOV));
#endif
    return i_data.extractToRight<INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR,
           INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_ERR0_RECOV_INT_PC_ERR0_RECOV_ERROR]

//>> PREP_[INT_PC_REGS_ERR1_FATAL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_ERR1_FATAL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_FATAL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_ERR1_FATAL]

//>> GET_[INT_PC_REGS_ERR1_FATAL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_ERR1_FATAL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_FATAL;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_ERR1_FATAL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_FATAL]

//>> PUT_[INT_PC_REGS_ERR1_FATAL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_ERR1_FATAL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_FATAL));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_ERR1_FATAL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_ERR1_FATAL]


//>> SET_[INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_FATAL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR,
           INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR]

//>> SET_[INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_FATAL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR,
           INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR]

//>> GET_[INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_FATAL));
#endif
    return i_data.extractToRight<INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR,
           INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_FATAL_INT_PC_ERR1_FATAL_ERROR]

//>> PREP_[INT_PC_REGS_NRQ_NXC_CRD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_NRQ_NXC_CRD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_NXC_CRD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_NRQ_NXC_CRD]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_NRQ_NXC_CRD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_NXC_CRD;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_NRQ_NXC_CRD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD]

//>> PUT_[INT_PC_REGS_NRQ_NXC_CRD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_NRQ_NXC_CRD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_NRQ_NXC_CRD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_NRQ_NXC_CRD]


//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKO_LD_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKO_LD_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_NCKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_LCL_CHKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_NCKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_RMT_CHKI_ST_LMIT]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57,
           INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57,
           INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57,
           INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_RESERVED_54_57]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX]

//>> SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX]

//>> GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX,
           INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_CRD_CFG_NRQ_NXC_CRD_MAX]

//>> PREP_[INT_PC_REGS_TCTXT_EN0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_EN0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_TCTXT_EN0]

//>> GET_[INT_PC_REGS_TCTXT_EN0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_EN0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN0;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_EN0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0]

//>> PUT_[INT_PC_REGS_TCTXT_EN0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_EN0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_EN0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_TCTXT_EN0]


//>> SET_[INT_PC_REGS_TCTXT_EN0_0_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_0_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_0_EN,
           INT_PC_REGS_TCTXT_EN0_0_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_0_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_0_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_0_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_0_EN,
           INT_PC_REGS_TCTXT_EN0_0_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_0_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_0_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_0_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_0_EN,
           INT_PC_REGS_TCTXT_EN0_0_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_0_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_1_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_1_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_1_EN,
           INT_PC_REGS_TCTXT_EN0_1_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_1_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_1_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_1_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_1_EN,
           INT_PC_REGS_TCTXT_EN0_1_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_1_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_1_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_1_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_1_EN,
           INT_PC_REGS_TCTXT_EN0_1_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_1_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_2_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_2_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_2_EN,
           INT_PC_REGS_TCTXT_EN0_2_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_2_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_2_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_2_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_2_EN,
           INT_PC_REGS_TCTXT_EN0_2_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_2_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_2_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_2_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_2_EN,
           INT_PC_REGS_TCTXT_EN0_2_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_2_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_3_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_3_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_3_EN,
           INT_PC_REGS_TCTXT_EN0_3_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_3_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_3_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_3_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_3_EN,
           INT_PC_REGS_TCTXT_EN0_3_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_3_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_3_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_3_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_3_EN,
           INT_PC_REGS_TCTXT_EN0_3_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_3_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_4_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_4_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_4_EN,
           INT_PC_REGS_TCTXT_EN0_4_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_4_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_4_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_4_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_4_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_4_EN,
           INT_PC_REGS_TCTXT_EN0_4_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_4_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_4_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_4_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_4_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_4_EN,
           INT_PC_REGS_TCTXT_EN0_4_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_4_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_4_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_5_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_5_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_5_EN,
           INT_PC_REGS_TCTXT_EN0_5_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_5_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_5_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_5_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_5_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_5_EN,
           INT_PC_REGS_TCTXT_EN0_5_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_5_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_5_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_5_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_5_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_5_EN,
           INT_PC_REGS_TCTXT_EN0_5_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_5_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_5_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_6_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_6_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_6_EN,
           INT_PC_REGS_TCTXT_EN0_6_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_6_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_6_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_6_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_6_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_6_EN,
           INT_PC_REGS_TCTXT_EN0_6_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_6_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_6_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_6_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_6_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_6_EN,
           INT_PC_REGS_TCTXT_EN0_6_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_6_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_6_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_7_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_7_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_7_EN,
           INT_PC_REGS_TCTXT_EN0_7_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_7_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_7_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN0_7_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN0_7_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN0_7_EN,
           INT_PC_REGS_TCTXT_EN0_7_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_7_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN0_7_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN0_7_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN0_7_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN0_7_EN,
           INT_PC_REGS_TCTXT_EN0_7_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN0_7_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN0_7_EN]

//>> PREP_[INT_PC_REGS_TCTXT_EN1_RESET]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_EN1_RESET(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN1_RESET;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_TCTXT_EN1_RESET]

//>> GET_[INT_PC_REGS_TCTXT_EN1_RESET]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_EN1_RESET(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN1_RESET;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_EN1_RESET, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_RESET]

//>> PUT_[INT_PC_REGS_TCTXT_EN1_RESET]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_EN1_RESET(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1_RESET));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_EN1_RESET, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_TCTXT_EN1_RESET]


//>> PREP_[INT_VC_AIB_TX_ORDERING_TAG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_AIB_TX_ORDERING_TAG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AIB_TX_ORDERING_TAG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_AIB_TX_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_AIB_TX_ORDERING_TAG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AIB_TX_ORDERING_TAG;
#endif
    return fapi2::getScom(i_target, INT_VC_AIB_TX_ORDERING_TAG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG]

//>> PUT_[INT_VC_AIB_TX_ORDERING_TAG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_AIB_TX_ORDERING_TAG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return fapi2::putScom(i_target, INT_VC_AIB_TX_ORDERING_TAG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_AIB_TX_ORDERING_TAG]


//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ERQ_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.setBit<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]

//>> CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.clearBit<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]
static inline bool GET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.getBit<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_18]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_EASC_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.setBit<INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]

//>> CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.clearBit<INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]
static inline bool GET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.getBit<INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_DMA_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_25_26]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ESBC_EOI_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_32_34]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.setBit<INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]

//>> CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.clearBit<INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]
static inline bool GET_INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.getBit<INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RELAXED_TRIG_FWD]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.setBit<INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]

//>> CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.clearBit<INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]
static inline bool GET_INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.getBit<INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_NO_ORDERING_DMA]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.setBit<INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]

//>> CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.clearBit<INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]
static inline bool GET_INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.getBit<INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_DISABLE_IDX_IN_AIBTAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.setBit<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]

//>> CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.clearBit<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]
static inline bool GET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.getBit<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_INT_EQP_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.setBit<INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]

//>> CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.clearBit<INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]
static inline bool GET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.getBit<INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_DMA_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_40_41]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_EOI_ESE_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_48_52]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CISTORE_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58,
           INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_RESERVED_56_58]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG]

//>> SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG]

//>> GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TX_ORDERING_TAG));
#endif
    return i_data.extractToRight<INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG,
           INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TX_ORDERING_TAG_ENDC_CILOAD_ORDERING_TAG]

//>> PREP_[INT_VC_ATX_INIT_CREDIT_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ATX_INIT_CREDIT_COUNT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ATX_INIT_CREDIT_COUNT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ATX_INIT_CREDIT_COUNT]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ATX_INIT_CREDIT_COUNT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ATX_INIT_CREDIT_COUNT;
#endif
    return fapi2::getScom(i_target, INT_VC_ATX_INIT_CREDIT_COUNT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT]

//>> PUT_[INT_VC_ATX_INIT_CREDIT_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ATX_INIT_CREDIT_COUNT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return fapi2::putScom(i_target, INT_VC_ATX_INIT_CREDIT_COUNT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ATX_INIT_CREDIT_COUNT]


//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.setBit<INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]

//>> CLEAR_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.clearBit<INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]
static inline bool GET_INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.getBit<INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_CRD_INIT_REQUEST]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.setBit<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]

//>> CLEAR_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.clearBit<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]
static inline bool GET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.getBit<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_25]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_READ]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_AT_MACRO]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_DOING_CI_LOAD]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_32_33]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL,
           INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL,
           INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL,
           INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_READ_CRD_POOL]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_40_43]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_DMA_WRITE]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_EQ_POST]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_TRIG_FWD_TO_INT]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC,
           INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RSD_CRD_ENDC_SYNC]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57,
           INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_RESERVED_52_57]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL,
           INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL]

//>> SET_[INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return o_data.insertFromRight<INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL,
           INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL]

//>> GET_[INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_INIT_CREDIT_COUNT));
#endif
    return i_data.extractToRight<INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL,
           INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_INIT_CREDIT_COUNT_WRITE_CRD_POOL]

//>> PREP_[INT_VC_ENDC_DBG_CACHE_EN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_DBG_CACHE_EN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_DBG_CACHE_EN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_DBG_CACHE_EN]

//>> GET_[INT_VC_ENDC_DBG_CACHE_EN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_DBG_CACHE_EN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_DBG_CACHE_EN;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_DBG_CACHE_EN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_DBG_CACHE_EN]

//>> PUT_[INT_VC_ENDC_DBG_CACHE_EN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_DBG_CACHE_EN(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG_CACHE_EN));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_DBG_CACHE_EN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_DBG_CACHE_EN]


//>> SET_[INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG_CACHE_EN));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE,
           INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE]

//>> SET_[INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG_CACHE_EN));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE,
           INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE]

//>> GET_[INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG_CACHE_EN));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE,
           INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_DBG_CACHE_EN_INT_VC_ENDC_DBG_CACHE_EN_ENABLE]

//>> PREP_[INT_VC_ENDC_WATCH1_DATA1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH1_DATA1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH1_DATA1]

//>> GET_[INT_VC_ENDC_WATCH1_DATA1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH1_DATA1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA1;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH1_DATA1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH1_DATA1]

//>> PUT_[INT_VC_ENDC_WATCH1_DATA1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH1_DATA1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH1_DATA1));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH1_DATA1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH1_DATA1]


//>> PREP_[INT_VC_ENDC_WATCH2_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH2_SPEC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH2_SPEC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH2_SPEC]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH2_SPEC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH2_SPEC;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH2_SPEC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC]

//>> PUT_[INT_VC_ENDC_WATCH2_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH2_SPEC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH2_SPEC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH2_SPEC]


//>> SET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_CONFLICT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_CONFLICT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_CONFLICT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_CONFLICT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_CONFLICT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.setBit<INT_VC_ENDC_WATCH2_SPEC_CONFLICT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]

//>> CLEAR_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_WATCH2_SPEC_CONFLICT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.clearBit<INT_VC_ENDC_WATCH2_SPEC_CONFLICT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH2_SPEC_CONFLICT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH2_SPEC_CONFLICT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]
static inline bool GET_INT_VC_ENDC_WATCH2_SPEC_CONFLICT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.getBit<INT_VC_ENDC_WATCH2_SPEC_CONFLICT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_CONFLICT]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_1_7]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_FULL]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_FULL]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.setBit<INT_VC_ENDC_WATCH2_SPEC_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_FULL]

//>> CLEAR_[INT_VC_ENDC_WATCH2_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_WATCH2_SPEC_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.clearBit<INT_VC_ENDC_WATCH2_SPEC_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_WATCH2_SPEC_FULL]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH2_SPEC_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH2_SPEC_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_FULL]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_FULL]
static inline bool GET_INT_VC_ENDC_WATCH2_SPEC_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.getBit<INT_VC_ENDC_WATCH2_SPEC_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_FULL]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_9_27]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_BLOCKID,
           INT_VC_ENDC_WATCH2_SPEC_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_BLOCKID]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_BLOCKID,
           INT_VC_ENDC_WATCH2_SPEC_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_BLOCKID]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH2_SPEC_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH2_SPEC_BLOCKID,
           INT_VC_ENDC_WATCH2_SPEC_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_BLOCKID]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39,
           INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_RESERVED_32_39]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_OFFSET,
           INT_VC_ENDC_WATCH2_SPEC_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_OFFSET]

//>> SET_[INT_VC_ENDC_WATCH2_SPEC_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH2_SPEC_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH2_SPEC_OFFSET,
           INT_VC_ENDC_WATCH2_SPEC_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH2_SPEC_OFFSET]

//>> GET_[INT_VC_ENDC_WATCH2_SPEC_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH2_SPEC_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH2_SPEC_OFFSET,
           INT_VC_ENDC_WATCH2_SPEC_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH2_SPEC_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_SPEC_OFFSET]

//>> PREP_[INT_VC_ERR_CFG_G0R0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ERR_CFG_G0R0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERR_CFG_G0R0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ERR_CFG_G0R0]

//>> GET_[INT_VC_ERR_CFG_G0R0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ERR_CFG_G0R0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERR_CFG_G0R0;
#endif
    return fapi2::getScom(i_target, INT_VC_ERR_CFG_G0R0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ERR_CFG_G0R0]

//>> PUT_[INT_VC_ERR_CFG_G0R0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ERR_CFG_G0R0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R0));
#endif
    return fapi2::putScom(i_target, INT_VC_ERR_CFG_G0R0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ERR_CFG_G0R0]


//>> SET_[INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R0));
#endif
    return o_data.insertFromRight<INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG,
           INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG]

//>> SET_[INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R0));
#endif
    return o_data.insertFromRight<INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG,
           INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG]

//>> GET_[INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R0));
#endif
    return i_data.extractToRight<INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG,
           INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ERR_CFG_G0R0_INT_VC_ERR_CFG_G0R0_ERROR_CONFIG]

//>> PREP_[INT_VC_ESBC_DBG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ESBC_DBG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_DBG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ESBC_DBG]

//>> GET_[INT_VC_ESBC_DBG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ESBC_DBG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_DBG;
#endif
    return fapi2::getScom(i_target, INT_VC_ESBC_DBG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ESBC_DBG]

//>> PUT_[INT_VC_ESBC_DBG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ESBC_DBG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return fapi2::putScom(i_target, INT_VC_ESBC_DBG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ESBC_DBG]


//>> SET_[INT_VC_ESBC_DBG_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_RESERVED_16_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_RESERVED_16_17,
           INT_VC_ESBC_DBG_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_16_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_RESERVED_16_17]

//>> SET_[INT_VC_ESBC_DBG_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_RESERVED_16_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_RESERVED_16_17,
           INT_VC_ESBC_DBG_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_16_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_RESERVED_16_17]

//>> GET_[INT_VC_ESBC_DBG_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_RESERVED_16_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_RESERVED_16_17,
           INT_VC_ESBC_DBG_RESERVED_16_17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_16_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_RESERVED_16_17]

//>> SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ,
           INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ]

//>> SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ,
           INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ]

//>> GET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ,
           INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_READ]

//>> SET_[INT_VC_ESBC_DBG_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_RESERVED_24_25,
           INT_VC_ESBC_DBG_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_RESERVED_24_25]

//>> SET_[INT_VC_ESBC_DBG_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_RESERVED_24_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_RESERVED_24_25,
           INT_VC_ESBC_DBG_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_RESERVED_24_25]

//>> GET_[INT_VC_ESBC_DBG_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_RESERVED_24_25,
           INT_VC_ESBC_DBG_RESERVED_24_25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_RESERVED_24_25]

//>> SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE,
           INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE]

//>> SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE,
           INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE]

//>> GET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE,
           INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_MAX_OUTSTANDING_DMA_WRITE]

//>> SET_[INT_VC_ESBC_DBG_WAY_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_WAY_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_WAY_DISABLE,
           INT_VC_ESBC_DBG_WAY_DISABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_WAY_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_WAY_DISABLE]

//>> SET_[INT_VC_ESBC_DBG_WAY_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_WAY_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_WAY_DISABLE,
           INT_VC_ESBC_DBG_WAY_DISABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_WAY_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_WAY_DISABLE]

//>> GET_[INT_VC_ESBC_DBG_WAY_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_WAY_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_WAY_DISABLE,
           INT_VC_ESBC_DBG_WAY_DISABLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_WAY_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_WAY_DISABLE]

//>> SET_[INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION,
           INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION,
           INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION]

//>> GET_[INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION,
           INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_DIS_TAG_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.setBit<INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]

//>> CLEAR_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.clearBit<INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]

//>> GET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]

//>> GET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]
static inline bool GET_INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.getBit<INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_DIS_STATE_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION,
           INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION,
           INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION]

//>> GET_[INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION,
           INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_DIS_DATA_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.setBit<INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]

//>> CLEAR_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.clearBit<INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]

//>> GET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]

//>> GET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]
static inline bool GET_INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.getBit<INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_DIS_CTRLBUF_ECC_CORRECTION]

//>> SET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.setBit<INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> CLEAR_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.clearBit<INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> GET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> GET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline bool GET_INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.getBit<INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.setBit<INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> CLEAR_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.clearBit<INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> GET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> GET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline bool GET_INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.getBit<INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL,
           INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL]

//>> SET_[INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL,
           INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL]

//>> GET_[INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL,
           INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_ECC_ERR_INJ_ARRAY_SEL]

//>> SET_[INT_VC_ESBC_DBG_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_TRACE_ENABLE]

//>> SET_[INT_VC_ESBC_DBG_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_TRACE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_TRACE_ENABLE]

//>> SET_[INT_VC_ESBC_DBG_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.setBit<INT_VC_ESBC_DBG_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ESBC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_TRACE_ENABLE]

//>> CLEAR_[INT_VC_ESBC_DBG_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ESBC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.clearBit<INT_VC_ESBC_DBG_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ESBC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ESBC_DBG_TRACE_ENABLE]

//>> GET_[INT_VC_ESBC_DBG_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_TRACE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_TRACE_ENABLE]

//>> GET_[INT_VC_ESBC_DBG_TRACE_ENABLE]
static inline bool GET_INT_VC_ESBC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.getBit<INT_VC_ESBC_DBG_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ESBC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_TRACE_ENABLE]

//>> SET_[INT_VC_ESBC_DBG_RESERVED_58_63]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_RESERVED_58_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_RESERVED_58_63,
           INT_VC_ESBC_DBG_RESERVED_58_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_58_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_RESERVED_58_63]

//>> SET_[INT_VC_ESBC_DBG_RESERVED_58_63]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_DBG_RESERVED_58_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_DBG_RESERVED_58_63,
           INT_VC_ESBC_DBG_RESERVED_58_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_58_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_DBG_RESERVED_58_63]

//>> GET_[INT_VC_ESBC_DBG_RESERVED_58_63]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_DBG_RESERVED_58_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ESBC_DBG_RESERVED_58_63,
           INT_VC_ESBC_DBG_RESERVED_58_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_DBG_RESERVED_58_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_DBG_RESERVED_58_63]

//>> PREP_[INT_VC_ESBC_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ESBC_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_FLUSH_POLL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ESBC_FLUSH_POLL]

//>> GET_[INT_VC_ESBC_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ESBC_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_FLUSH_POLL;
#endif
    return fapi2::getScom(i_target, INT_VC_ESBC_FLUSH_POLL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_POLL]

//>> PUT_[INT_VC_ESBC_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ESBC_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return fapi2::putScom(i_target, INT_VC_ESBC_FLUSH_POLL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ESBC_FLUSH_POLL]


//>> SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_BLOCKID,
           INT_VC_ESBC_FLUSH_POLL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID]

//>> SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_BLOCKID,
           INT_VC_ESBC_FLUSH_POLL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID]

//>> GET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_POLL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_POLL_BLOCKID,
           INT_VC_ESBC_FLUSH_POLL_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID]

//>> SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_OFFSET,
           INT_VC_ESBC_FLUSH_POLL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET]

//>> SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_OFFSET,
           INT_VC_ESBC_FLUSH_POLL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET]

//>> GET_[INT_VC_ESBC_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_POLL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_POLL_OFFSET,
           INT_VC_ESBC_FLUSH_POLL_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_POLL_OFFSET]

//>> SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK,
           INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK]

//>> SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK,
           INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK]

//>> GET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK,
           INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_POLL_BLOCKID_MASK]

//>> SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK,
           INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK]

//>> SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK,
           INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK]

//>> GET_[INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK,
           INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_POLL_OFFSET_MASK]

//>> PREP_[INT_VC_MAIN_DBG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_MAIN_DBG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_MAIN_DBG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_MAIN_DBG]

//>> GET_[INT_VC_MAIN_DBG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_MAIN_DBG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_MAIN_DBG;
#endif
    return fapi2::getScom(i_target, INT_VC_MAIN_DBG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_MAIN_DBG]

//>> PUT_[INT_VC_MAIN_DBG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_MAIN_DBG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return fapi2::putScom(i_target, INT_VC_MAIN_DBG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_MAIN_DBG]


//>> SET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_AIB_IN_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_TAG_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_IRQ_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_ERQ_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_IQS_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_AT_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_VSD_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]

//>> CLEAR_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]

//>> GET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]
static inline bool GET_INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_DIS_CTAG_SRAM_ECC_CORRECTION]

//>> SET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> CLEAR_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> GET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> GET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]
static inline bool GET_INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_FORCE_SINGLE_BIT_ECC_ERR]

//>> SET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> CLEAR_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> GET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> GET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]
static inline bool GET_INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_FORCE_DOUBLE_BIT_ECC_ERR]

//>> SET_[INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION,
           INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION]

//>> SET_[INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION,
           INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION]

//>> GET_[INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION,
           INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_ECC_ERR_INJ_SELECTION]

//>> SET_[INT_VC_MAIN_DBG_RESERVED_16_21]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_RESERVED_16_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_RESERVED_16_21,
           INT_VC_MAIN_DBG_RESERVED_16_21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_RESERVED_16_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_RESERVED_16_21]

//>> SET_[INT_VC_MAIN_DBG_RESERVED_16_21]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_RESERVED_16_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_RESERVED_16_21,
           INT_VC_MAIN_DBG_RESERVED_16_21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_RESERVED_16_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_RESERVED_16_21]

//>> GET_[INT_VC_MAIN_DBG_RESERVED_16_21]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_RESERVED_16_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_RESERVED_16_21,
           INT_VC_MAIN_DBG_RESERVED_16_21_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_RESERVED_16_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_RESERVED_16_21]

//>> SET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]

//>> SET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]

//>> SET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]

//>> CLEAR_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]

//>> GET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]

//>> GET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]
static inline bool GET_INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_IRQ_TRACE_ENABLE]

//>> SET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_EQA_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_EQA_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_EQA_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]

//>> SET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_EQA_TRACE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_EQA_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_EQA_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]

//>> SET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_EQA_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_EQA_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_EQA_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]

//>> CLEAR_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_EQA_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_EQA_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_EQA_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]

//>> GET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_EQA_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_EQA_TRACE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_EQA_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]

//>> GET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]
static inline bool GET_INT_VC_MAIN_DBG_EQA_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_EQA_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_EQA_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_EQA_TRACE_ENABLE]

//>> SET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]

//>> SET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]

//>> SET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]

//>> CLEAR_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]

//>> GET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]

//>> GET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]
static inline bool GET_INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_ATX_CACHE_SLOTS_IDLE]

//>> SET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ATX_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_ATX_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]

//>> SET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ATX_IS_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.insertFromRight<INT_VC_MAIN_DBG_ATX_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]

//>> SET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_MAIN_DBG_ATX_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.setBit<INT_VC_MAIN_DBG_ATX_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]

//>> CLEAR_[INT_VC_MAIN_DBG_ATX_IS_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_MAIN_DBG_ATX_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return o_data.clearBit<INT_VC_MAIN_DBG_ATX_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_MAIN_DBG_ATX_IS_IDLE]

//>> GET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_MAIN_DBG_ATX_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.extractToRight<INT_VC_MAIN_DBG_ATX_IS_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]

//>> GET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]
static inline bool GET_INT_VC_MAIN_DBG_ATX_IS_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_MAIN_DBG));
#endif
    return i_data.getBit<INT_VC_MAIN_DBG_ATX_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_MAIN_DBG_ATX_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_MAIN_DBG_ATX_IS_IDLE]

//>> PREP_[INT_VC_QUEUES_CFG_REM_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_CFG_REM_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_CFG_REM_0]

//>> GET_[INT_VC_QUEUES_CFG_REM_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_CFG_REM_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_0;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_CFG_REM_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0]

//>> PUT_[INT_VC_QUEUES_CFG_REM_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_CFG_REM_0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_CFG_REM_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_CFG_REM_0]


//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_IRQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_ERQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]
static inline bool GET_INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_0));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_0_ERQ_CFG_UPD_PND]

//>> PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_3]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_3;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3]

//>> PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_3]


//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_3_EQA_TO_ENDC]

//>> PREP_[INT_VC_RECOV_ERR_G0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_RECOV_ERR_G0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_RECOV_ERR_G0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_RECOV_ERR_G0]

//>> GET_[INT_VC_RECOV_ERR_G0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_RECOV_ERR_G0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_RECOV_ERR_G0;
#endif
    return fapi2::getScom(i_target, INT_VC_RECOV_ERR_G0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_RECOV_ERR_G0]

//>> PUT_[INT_VC_RECOV_ERR_G0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_RECOV_ERR_G0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G0));
#endif
    return fapi2::putScom(i_target, INT_VC_RECOV_ERR_G0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_RECOV_ERR_G0]


//>> SET_[INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G0));
#endif
    return o_data.insertFromRight<INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR,
           INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR]

//>> SET_[INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G0));
#endif
    return o_data.insertFromRight<INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR,
           INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR]

//>> GET_[INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G0));
#endif
    return i_data.extractToRight<INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR,
           INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_RECOV_ERR_G0_INT_VC_RECOV_ERR_G0_ERROR]

//>> PREP_[MCD_MCC_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_MCC_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_MCC_FIR_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_MCC_FIR_REG_RW]

//>> GET_[MCD_MCC_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_MCC_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_MCC_FIR_REG_RW;
#endif
    return fapi2::getScom(i_target, MCD_MCC_FIR_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_RW]

//>> PUT_[MCD_MCC_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_MCC_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, MCD_MCC_FIR_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_MCC_FIR_REG_RW]

//>> PREP_[MCD_MCC_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_MCC_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_MCC_FIR_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_MCC_FIR_REG_WO_AND]

//>> GET_[MCD_MCC_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_MCC_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_MCC_FIR_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, MCD_MCC_FIR_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_WO_AND]

//>> PUT_[MCD_MCC_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_MCC_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, MCD_MCC_FIR_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_MCC_FIR_REG_WO_AND]

//>> PREP_[MCD_MCC_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_MCC_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_MCC_FIR_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_MCC_FIR_REG_WO_OR]

//>> GET_[MCD_MCC_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_MCC_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_MCC_FIR_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, MCD_MCC_FIR_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_WO_OR]

//>> PUT_[MCD_MCC_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_MCC_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, MCD_MCC_FIR_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_MCC_FIR_REG_WO_OR]


//>> SET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]

//>> SET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]

//>> SET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]

//>> GET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]

//>> GET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]
static inline bool GET_MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_ARRAY_ECC_UE_ERR]

//>> SET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]

//>> SET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]

//>> SET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]

//>> GET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]

//>> GET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]
static inline bool GET_MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_ARRAY_ECC_CE_ERR]

//>> SET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]

//>> GET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]

//>> GET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]
static inline bool GET_MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_PB_ADDR_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_SM_OR_CASE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_SM_OR_CASE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_SM_OR_CASE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]

//>> SET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_SM_OR_CASE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_SM_OR_CASE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_SM_OR_CASE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]

//>> SET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_SM_OR_CASE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_SM_OR_CASE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_SM_OR_CASE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_SM_OR_CASE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_SM_OR_CASE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_SM_OR_CASE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]

//>> GET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_SM_OR_CASE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_SM_OR_CASE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_SM_OR_CASE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]

//>> GET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]
static inline bool GET_MCD_MCC_FIR_REG_SM_OR_CASE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_SM_OR_CASE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_SM_OR_CASE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_SM_OR_CASE_ERR]

//>> SET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]

//>> SET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]

//>> SET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]

//>> GET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]

//>> GET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]
static inline bool GET_MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_CL_PROBE_PB_HANG_ERR]

//>> SET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CRESP_ADDR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_CRESP_ADDR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_CRESP_ADDR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]

//>> SET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CRESP_ADDR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_CRESP_ADDR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_CRESP_ADDR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]

//>> SET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CRESP_ADDR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_CRESP_ADDR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_CRESP_ADDR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_CRESP_ADDR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_CRESP_ADDR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_CRESP_ADDR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]

//>> GET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_CRESP_ADDR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_CRESP_ADDR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_CRESP_ADDR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]

//>> GET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]
static inline bool GET_MCD_MCC_FIR_REG_CRESP_ADDR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_CRESP_ADDR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_CRESP_ADDR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_CRESP_ADDR_ERR]

//>> SET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]

//>> SET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]

//>> SET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]

//>> GET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]

//>> GET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]
static inline bool GET_MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_UNSOLICITED_CRESP_ERR]

//>> SET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_TTAG_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_TTAG_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_TTAG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_TTAG_PARITY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_TTAG_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_TTAG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_TTAG_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_TTAG_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_TTAG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_TTAG_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_TTAG_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_TTAG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]

//>> GET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_TTAG_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_TTAG_PARITY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_TTAG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]

//>> GET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]
static inline bool GET_MCD_MCC_FIR_REG_TTAG_PARITY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_TTAG_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_TTAG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_TTAG_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]

//>> SET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]

//>> SET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]

//>> GET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]

//>> GET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]
static inline bool GET_MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_FIR_REG_UPDATE_ERR]

//>> SET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]

//>> SET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]

//>> SET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]

//>> GET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]

//>> GET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]
static inline bool GET_MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_ACK_DEAD_CRESP_ERR]

//>> SET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]

//>> SET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.setBit<MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]

//>> CLEAR_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]

//>> GET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]

//>> GET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]
static inline bool GET_MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_MCC_FIR_REG_RW, MCD_MCC_FIR_REG_WO_AND, MCD_MCC_FIR_REG_WO_OR));
#endif
    return i_data.getBit<MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_MCC_FIR_REG_CFG_REG_PARITY_ERR]

//>> PREP_[NX_DMA_SU_CH2_ABORT_CSB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_SU_CH2_ABORT_CSB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_CH2_ABORT_CSB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_DMA_SU_CH2_ABORT_CSB]

//>> GET_[NX_DMA_SU_CH2_ABORT_CSB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_SU_CH2_ABORT_CSB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_CH2_ABORT_CSB;
#endif
    return fapi2::getScom(i_target, NX_DMA_SU_CH2_ABORT_CSB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_DMA_SU_CH2_ABORT_CSB]

//>> PUT_[NX_DMA_SU_CH2_ABORT_CSB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_SU_CH2_ABORT_CSB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_CH2_ABORT_CSB));
#endif
    return fapi2::putScom(i_target, NX_DMA_SU_CH2_ABORT_CSB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_DMA_SU_CH2_ABORT_CSB]


//>> PREP_[NX_DMA_SU_CH3_ABORT_CSB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_SU_CH3_ABORT_CSB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_CH3_ABORT_CSB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_DMA_SU_CH3_ABORT_CSB]

//>> GET_[NX_DMA_SU_CH3_ABORT_CSB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_SU_CH3_ABORT_CSB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_CH3_ABORT_CSB;
#endif
    return fapi2::getScom(i_target, NX_DMA_SU_CH3_ABORT_CSB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_DMA_SU_CH3_ABORT_CSB]

//>> PUT_[NX_DMA_SU_CH3_ABORT_CSB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_SU_CH3_ABORT_CSB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_CH3_ABORT_CSB));
#endif
    return fapi2::putScom(i_target, NX_DMA_SU_CH3_ABORT_CSB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_DMA_SU_CH3_ABORT_CSB]


//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_MASK_REG_NX_CQ_FIR_MASK]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_MODE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ECC_INJECT_TYPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_INJECT_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_PBCQ_ARRAY]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_RNG_INJECT_ACTION]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_TYPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_ACTION]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_ECC_REG_ERAT_ARRAY_SELECT]

//>> PREP_[NX_PBI_RNG_ST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_RNG_ST1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_RNG_ST1]

//>> GET_[NX_PBI_RNG_ST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_RNG_ST1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST1;
#endif
    return fapi2::getScom(i_target, NX_PBI_RNG_ST1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_RNG_ST1]

//>> PUT_[NX_PBI_RNG_ST1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_RNG_ST1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return fapi2::putScom(i_target, NX_PBI_RNG_ST1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_RNG_ST1]


//>> SET_[NX_PBI_RNG_ST1_SOFT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST1_SOFT_FAIL_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST1_SOFT_FAIL_TH,
           NX_PBI_RNG_ST1_SOFT_FAIL_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST1_SOFT_FAIL_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST1_SOFT_FAIL_TH]

//>> SET_[NX_PBI_RNG_ST1_SOFT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST1_SOFT_FAIL_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST1_SOFT_FAIL_TH,
           NX_PBI_RNG_ST1_SOFT_FAIL_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST1_SOFT_FAIL_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST1_SOFT_FAIL_TH]

//>> GET_[NX_PBI_RNG_ST1_SOFT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST1_SOFT_FAIL_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST1_SOFT_FAIL_TH,
           NX_PBI_RNG_ST1_SOFT_FAIL_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST1_SOFT_FAIL_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST1_SOFT_FAIL_TH]

//>> SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN,
           NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN]

//>> SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN,
           NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN]

//>> GET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN,
           NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MIN]

//>> SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX,
           NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX]

//>> SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX,
           NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX]

//>> GET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST1));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX,
           NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST1_1BIT_MATCH_TH_MAX]

//>> PREP_[NX_PBI_SHIM_ERAT_STATUS_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_SHIM_ERAT_STATUS_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_SHIM_ERAT_STATUS_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_SHIM_ERAT_STATUS_CONTROL]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_SHIM_ERAT_STATUS_CONTROL;
#endif
    return fapi2::getScom(i_target, NX_PBI_SHIM_ERAT_STATUS_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL]

//>> PUT_[NX_PBI_SHIM_ERAT_STATUS_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_SHIM_ERAT_STATUS_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return fapi2::putScom(i_target, NX_PBI_SHIM_ERAT_STATUS_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_SHIM_ERAT_STATUS_CONTROL]


//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]

//>> CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]
static inline bool GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_FORCE_ERAT_BYPASS]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]

//>> CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]
static inline bool GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_IDLE]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]

//>> CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]
static inline bool GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_ERAT_VALID_ENTRY]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]

//>> CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]
static inline bool GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_ERAT_HIT_UNDER_BARRIER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]

//>> CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]
static inline bool GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_PROMOTE]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]

//>> CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]
static inline bool GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKIN_HANG_TIMER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]

//>> CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]
static inline bool GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_DISABLE_CHECKOUT_HANG_TIMER]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT,
           NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT]

//>> SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT,
           NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT]

//>> GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_SHIM_ERAT_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT,
           NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_SHIM_ERAT_STATUS_CONTROL_SPECULATIVE_CHECKIN_COUNT]

//>> PREP_[NX_PBI_UMAC_RNG_FAILED_INT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_RNG_FAILED_INT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_RNG_FAILED_INT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_RNG_FAILED_INT]

//>> GET_[NX_PBI_UMAC_RNG_FAILED_INT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_RNG_FAILED_INT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_RNG_FAILED_INT;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_RNG_FAILED_INT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_RNG_FAILED_INT]

//>> PUT_[NX_PBI_UMAC_RNG_FAILED_INT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_RNG_FAILED_INT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_RNG_FAILED_INT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_RNG_FAILED_INT]


//>> SET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_RNG_FAILED_INT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_RNG_FAILED_INT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]

//>> SET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_RNG_FAILED_INT_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_RNG_FAILED_INT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]

//>> SET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_RNG_FAILED_INT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return o_data.setBit<NX_PBI_UMAC_RNG_FAILED_INT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]

//>> CLEAR_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_RNG_FAILED_INT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return o_data.clearBit<NX_PBI_UMAC_RNG_FAILED_INT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]

//>> GET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_RNG_FAILED_INT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_RNG_FAILED_INT_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]

//>> GET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]
static inline bool GET_NX_PBI_UMAC_RNG_FAILED_INT_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return i_data.getBit<NX_PBI_UMAC_RNG_FAILED_INT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_RNG_FAILED_INT_ENABLE]

//>> SET_[NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS,
           NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS]

//>> SET_[NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS,
           NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS]

//>> GET_[NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_RNG_FAILED_INT));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS,
           NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_RNG_FAILED_INT_ADDRESS]

//>> PREP_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL]

//>> PUT_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL]


//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT]

//>> PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT]


//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EN4_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_CFG2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2]

//>> PUT_[PB_COM_SCOM_EN4_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_CFG2]


//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_AGG_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_AGG_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_G_IND_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_R_IND_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_USE_BURST_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_RATE_THRESH_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3,
           PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX3]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_TOK_INIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_XLINK_MAX_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4,
           PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG2_COM_CR_ALINK_MAX_EN4]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR]

//>> PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR]


//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_VALID_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN4]

//>> PREP_[PB_COM_SCOM_EN4_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_MODE]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE]

//>> PUT_[PB_COM_SCOM_EN4_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_MODE]


//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HOP_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PUMP_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REPRO_MODE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SW_AB_WAIT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SP_HW_MARK_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_GP_HW_MARK_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_NP_HW_MARK_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4,
           PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN4]

//>> PREP_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT]

//>> PUT_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT]


//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_COMPB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_COMPB;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_COMPB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_COMPB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB]


//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTYPE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TSIZE_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_TTAG_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_MASK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_CRESP_POLARITY_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_COMPB_SCOPE_EQ1]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR]


//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ1]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_PM_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_PM_CONTROL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_PM_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_PM_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL]


//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX04_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX05_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX06_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_EX07_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_PM_CONTROL_PB_CFG_SPARE2]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR]


//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ2]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE]


//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_0_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_1_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_2_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_3_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_4_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_5_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_6_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3,
           PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_GP_CMD_RATE_7_EQ3]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_CFG2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_CFG2]


//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ4]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT]


//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_MODE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_MODE]


//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HOP_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PUMP_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REPRO_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SP_HW_MARK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_GP_HW_MARK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_NP_HW_MARK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4,
           PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ4]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_CR_ERROR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_CR_ERROR]


//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP]

//>> SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP]

//>> GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_CR_ERROR_FG_PRESP]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE]


//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_0_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_1_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_2_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_3_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_4_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_5_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_6_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5,
           PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_GP_CMD_RATE_7_EQ5]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_COMPB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_COMPB;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_COMPB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_COMPB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB]


//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTYPE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TSIZE_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_TTAG_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_MASK_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_CRESP_POLARITY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_COMPB_SCOPE_EQ7]

//>> PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT]

//>> PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT]


//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES1]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
