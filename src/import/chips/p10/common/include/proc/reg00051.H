/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00051.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00051_H_
#define __PROC_REG00051_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[PB_COM_SCOM_ES2_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_CFG2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2]

//>> PUT_[PB_COM_SCOM_ES2_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_CFG2]


//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2,
           PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES2]

//>> PREP_[PB_COM_SCOM_ES2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_ES2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW]

//>> PUT_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW]

//>> PREP_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR]


//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> PREP_[PB_COM_SCOM_ES2_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_MODE]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE]

//>> PUT_[PB_COM_SCOM_ES2_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_MODE]


//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HOP_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PUMP_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REPRO_MODE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SW_AB_WAIT_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SP_HW_MARK_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_GP_HW_MARK_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_NP_HW_MARK_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2,
           PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES2]

//>> PREP_[PB_COM_SCOM_ES3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_ES3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_PBS_EVENT_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PBS_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC0_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MC1_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_MCD_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_SEL_PB_CFG_CNPMS_PE0_MASK]

//>> PREP_[PB_COM_SCOM_ES4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES4_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES4_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_ES4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES4_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES4_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR]

//>> PUT_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR]


//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_VALID_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES4]

//>> PREP_[PB_PTLSCOM23_FP01_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_FP01_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_FP01_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_FP01_CFG]

//>> GET_[PB_PTLSCOM23_FP01_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_FP01_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_FP01_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_FP01_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG]

//>> PUT_[PB_PTLSCOM23_FP01_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_FP01_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_FP01_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_FP01_CFG]


//>> SET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME,
           PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME]

//>> SET_[PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME,
           PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME]

//>> GET_[PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME,
           PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_01_CMD_EXP_TIME]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE,
           PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE]

//>> SET_[PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE,
           PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE]

//>> GET_[PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE,
           PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_0_PRS_SPARE]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE,
           PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE,
           PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE,
           PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_FMR_SPARE]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]

//>> CLEAR_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]
static inline bool GET_PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE,
           PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE]

//>> SET_[PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE,
           PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE]

//>> GET_[PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_FP01_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE,
           PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_FP01_CFG_1_PRS_SPARE]

//>> PREP_[PB_PTLSCOM23_MISC_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_MISC_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_MISC_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_MISC_CFG]

//>> GET_[PB_PTLSCOM23_MISC_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_MISC_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_MISC_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_MISC_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG]

//>> PUT_[PB_PTLSCOM23_MISC_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_MISC_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_MISC_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_MISC_CFG]


//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_IS_LOGICAL_PAIR]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_IS_LOGICAL_PAIR]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_RESET_KEEPER]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_RESET_KEEPER]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_ENABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_EVN_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU0_ODD_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_EVN_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_IB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PAU1_ODD_IB_MUX_EN]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_0_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_1_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_2_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL0]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL1]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL2]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_3_OB_MUX_CTL3]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLX_EMULATION_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_SCOM_PTLY_EMULATION_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]

//>> SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]

//>> GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_TRANSPORT_PRI_BUS_CTL]

//>> SET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_ENABLE_DEGRADED_MODE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]

//>> CLEAR_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]
static inline bool GET_PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_HW517132_DISABLE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_MISC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_MISC_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_MISC_SPARE,
           PB_PTLSCOM23_MISC_CFG_MISC_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_MISC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_MISC_SPARE]

//>> SET_[PB_PTLSCOM23_MISC_CFG_MISC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_MISC_CFG_MISC_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_MISC_CFG_MISC_SPARE,
           PB_PTLSCOM23_MISC_CFG_MISC_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_MISC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_MISC_CFG_MISC_SPARE]

//>> GET_[PB_PTLSCOM23_MISC_CFG_MISC_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_MISC_CFG_MISC_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_MISC_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_MISC_CFG_MISC_SPARE,
           PB_PTLSCOM23_MISC_CFG_MISC_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_MISC_CFG_MISC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_MISC_CFG_MISC_SPARE]

//>> PREP_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG]

//>> PUT_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG]


//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> PREP_[PB_PTLSCOM45_FP23_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_FP23_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_FP23_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_FP23_CFG]

//>> GET_[PB_PTLSCOM45_FP23_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_FP23_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_FP23_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_FP23_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG]

//>> PUT_[PB_PTLSCOM45_FP23_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_FP23_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_FP23_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_FP23_CFG]


//>> SET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME,
           PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME]

//>> SET_[PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME,
           PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME]

//>> GET_[PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME,
           PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_23_CMD_EXP_TIME]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE,
           PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE]

//>> SET_[PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE,
           PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE]

//>> GET_[PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE,
           PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_2_PRS_SPARE]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_CREDIT_PRIORITY_4_NOT_8]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_GATHERING]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_CMD_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_DISABLE_PRSP_COMPRESSION]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_FW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_HW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT,
           PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_LL_CREDIT_QW_LIMIT]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_FMR_ENABLE_1PER4_PRESP]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE,
           PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE,
           PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE,
           PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_FMR_SPARE]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_RUN_AFTER_FRAME_ERROR]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]

//>> CLEAR_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]
static inline bool GET_PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_BRICKWALL_CREDITS_TO_NEST]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE,
           PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE]

//>> SET_[PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE,
           PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE]

//>> GET_[PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_FP23_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE,
           PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_FP23_CFG_3_PRS_SPARE]

//>> PREP_[PB_PTLSCOM45_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PMU3_CNPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_PMU3_CNPM_COUNTER]

//>> GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PMU3_CNPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_PMU3_CNPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER]

//>> PUT_[PB_PTLSCOM45_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_PMU3_CNPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_PMU3_CNPM_COUNTER]


//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_0]

//>> GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_1]

//>> GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_2]

//>> GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_3]

//>> SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_3]

//>> GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU3_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM45_PMU3_CNPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU3_CNPM_COUNTER_3]

//>> PREP_[PB_PTLSCOM67_PMU0_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_PMU0_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PMU0_TLPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_PMU0_TLPM_COUNTER]

//>> GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_PMU0_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PMU0_TLPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_PMU0_TLPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER]

//>> PUT_[PB_PTLSCOM67_PMU0_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_PMU0_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_PMU0_TLPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_PMU0_TLPM_COUNTER]


//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_0,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_0]

//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_0,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_0]

//>> GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_0,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_0]

//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_1,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_1]

//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_1,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_1]

//>> GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_1,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_1]

//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_2,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_2]

//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_2,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_2]

//>> GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_2,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_2]

//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_3,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_3]

//>> SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_3,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_3]

//>> GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU0_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU0_TLPM_COUNTER_3,
           PB_PTLSCOM67_PMU0_TLPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU0_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU0_TLPM_COUNTER_3]

//>> PREP_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_DECAY_1_CONTROL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG]

//>> GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_DECAY_1_CONTROL_REG;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_DECAY_1_CONTROL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG]

//>> PUT_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_DECAY_1_CONTROL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG]


//>> SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]

//>> SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]

//>> SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]

//>> CLEAR_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]

//>> GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]

//>> GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]
static inline bool GET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_ENABLE]

//>> SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY,
           PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY]

//>> SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY,
           PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY]

//>> GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_CONTROL_REG));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY,
           PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_1_CONTROL_REG_DELAY]

//>> PREP_[PB_BRIDGE_NHTM_SC_HTM_FILT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_NHTM_SC_HTM_FILT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_FILT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_NHTM_SC_HTM_FILT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_NHTM_SC_HTM_FILT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_FILT;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_NHTM_SC_HTM_FILT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT]

//>> PUT_[PB_BRIDGE_NHTM_SC_HTM_FILT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_NHTM_SC_HTM_FILT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_NHTM_SC_HTM_FILT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_NHTM_SC_HTM_FILT]


//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO24_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_MCD_TTAG]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_TTAGFILT_INVERT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_PAT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_TTAG_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC15TO16_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SCOPE_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_SOURCE_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_PORT_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_OCC23TO26_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FILT));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK,
           PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FILT_FILT_CRESP_MASK]

//>> PREP_[PSI_MAC_SCOM_REGS_RX_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PSI_MAC_SCOM_REGS_RX_CNTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PSI_MAC_SCOM_REGS_RX_CNTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PSI_MAC_SCOM_REGS_RX_CNTL]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PSI_MAC_SCOM_REGS_RX_CNTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PSI_MAC_SCOM_REGS_RX_CNTL;
#endif
    return fapi2::getScom(i_target, PSI_MAC_SCOM_REGS_RX_CNTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL]

//>> PUT_[PSI_MAC_SCOM_REGS_RX_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PSI_MAC_SCOM_REGS_RX_CNTL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return fapi2::putScom(i_target, PSI_MAC_SCOM_REGS_RX_CNTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PSI_MAC_SCOM_REGS_RX_CNTL]


//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.setBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>& CLEAR_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.clearBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.getBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_IORESET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.setBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]

//>> CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.clearBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]
static inline bool GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.getBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_CHECK_EN]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PATTERN_SEL]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.setBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]

//>> CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]
static inline fapi2::buffer<uint64_t>& CLEAR_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.clearBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]
static inline bool GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.getBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_INVERT]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.setBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]

//>> CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]
static inline fapi2::buffer<uint64_t>& CLEAR_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.clearBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]
static inline bool GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.getBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_LANE_INVERT]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.setBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]

//>> CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]
static inline fapi2::buffer<uint64_t>& CLEAR_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.clearBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]
static inline bool GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.getBit<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_PDWN]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_CLK_DLY]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DATA_DLY]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_CLK_DLY]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY]

//>> SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY]

//>> GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_RX_CNTL));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY,
           PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_RX_CNTL_RX_PSI_DEGLITCH_DATA_DLY]

//>> PREP_[TP_LPC_SYNC_FIR_WOF_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_LPC_SYNC_FIR_WOF_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_LPC_SYNC_FIR_WOF_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_LPC_SYNC_FIR_WOF_REG]

//>> GET_[TP_LPC_SYNC_FIR_WOF_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_LPC_SYNC_FIR_WOF_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_LPC_SYNC_FIR_WOF_REG;
#endif
    return fapi2::getScom(i_target, TP_LPC_SYNC_FIR_WOF_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_LPC_SYNC_FIR_WOF_REG]

//>> PUT_[TP_LPC_SYNC_FIR_WOF_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_LPC_SYNC_FIR_WOF_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_LPC_SYNC_FIR_WOF_REG));
#endif
    return fapi2::putScom(i_target, TP_LPC_SYNC_FIR_WOF_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_LPC_SYNC_FIR_WOF_REG]


//>> SET_[TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF]
static inline fapi2::buffer<uint64_t>& SET_TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_LPC_SYNC_FIR_WOF_REG));
#endif
    return o_data.insertFromRight<TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF,
           TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF]

//>> SET_[TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF]
static inline fapi2::buffer<uint64_t>& SET_TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_LPC_SYNC_FIR_WOF_REG));
#endif
    return o_data.insertFromRight<TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF,
           TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF]

//>> GET_[TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF]
static inline fapi2::buffer<uint64_t>& GET_TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_LPC_SYNC_FIR_WOF_REG));
#endif
    return i_data.extractToRight<TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF,
           TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_LPC_SYNC_FIR_WOF_REG_SYNC_FIR_WOF]

//>> PREP_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3]

//>> PUT_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_3]


//>> PREP_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3]

//>> PUT_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_3]


//>> PREP_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]

//>> PUT_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]


//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015]

//>> PREP_[TP_TCN0_N0_EPS_FIR_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_FIR_MODE_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_MODE_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_FIR_MODE_REG]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_FIR_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_MODE_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_FIR_MODE_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG]

//>> PUT_[TP_TCN0_N0_EPS_FIR_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_FIR_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_FIR_MODE_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_FIR_MODE_REG]


//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_RECOV]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_SPATTN]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_LXSTOP]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_XSTOP_LOCK_HOSTATTN]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG05]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_DISABLE_IOPB_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG07]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG08]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MASK_DIRECT_ERROR]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG10]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG11]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG12]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG13]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG14]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]

//>> SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]

//>> GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]
static inline bool GET_TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_MODE_REG_MODE_REG15]

//>> PREP_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG]

//>> PUT_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG]


//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_DISABLE_SKITTER_STICKINESS]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_DBGTRIG_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_RESET_TRIG_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_SAMPLE_GUTS]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]
static inline fapi2::buffer<uint64_t>&
CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_HOLD_SAMPLE_WITH_TRIGGER]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_MODE_REG_SKITTER_DATA_V_LT]

//>> PREP_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG]

//>> PUT_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG]


//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2,
           TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]

//>> CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]
static inline bool GET_TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3]

//>> PREP_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_LOCAL_XSTOP_UNMASKED(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_LOCAL_XSTOP_UNMASKED;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED]

//>> GET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_LOCAL_XSTOP_UNMASKED(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_LOCAL_XSTOP_UNMASKED;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_LOCAL_XSTOP_UNMASKED, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED]

//>> PUT_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_LOCAL_XSTOP_UNMASKED(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_LOCAL_XSTOP_UNMASKED));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_LOCAL_XSTOP_UNMASKED, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED]


//>> SET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_LOCAL_XSTOP_UNMASKED));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN,
           TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN]

//>> SET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_LOCAL_XSTOP_UNMASKED));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN,
           TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN]

//>> GET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_LOCAL_XSTOP_UNMASKED));
#endif
    return i_data.extractToRight<TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN,
           TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_LOCAL_XSTOP_UNMASKED_LOCAL_XSTOP_UNMASKED_IN]

//>> PREP_[TP_TCN0_N0_OPCG_REG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_OPCG_REG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_OPCG_REG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_OPCG_REG1]

//>> GET_[TP_TCN0_N0_OPCG_REG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_OPCG_REG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_OPCG_REG1;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_OPCG_REG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1]

//>> PUT_[TP_TCN0_N0_OPCG_REG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_OPCG_REG1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_OPCG_REG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_OPCG_REG1]


//>> SET_[TP_TCN0_N0_OPCG_REG1_SCAN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SCAN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_SCAN_COUNT,
           TP_TCN0_N0_OPCG_REG1_SCAN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SCAN_COUNT]

//>> SET_[TP_TCN0_N0_OPCG_REG1_SCAN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SCAN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_SCAN_COUNT,
           TP_TCN0_N0_OPCG_REG1_SCAN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SCAN_COUNT]

//>> GET_[TP_TCN0_N0_OPCG_REG1_SCAN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_SCAN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_SCAN_COUNT,
           TP_TCN0_N0_OPCG_REG1_SCAN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_SCAN_COUNT]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_A_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_A_VAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_A_VAL,
           TP_TCN0_N0_OPCG_REG1_MISR_A_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_A_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_A_VAL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_A_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_A_VAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_A_VAL,
           TP_TCN0_N0_OPCG_REG1_MISR_A_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_A_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_A_VAL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_MISR_A_VAL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_MISR_A_VAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_MISR_A_VAL,
           TP_TCN0_N0_OPCG_REG1_MISR_A_VAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_A_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_MISR_A_VAL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_B_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_B_VAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_B_VAL,
           TP_TCN0_N0_OPCG_REG1_MISR_B_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_B_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_B_VAL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_B_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_B_VAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_B_VAL,
           TP_TCN0_N0_OPCG_REG1_MISR_B_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_B_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_B_VAL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_MISR_B_VAL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_MISR_B_VAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_MISR_B_VAL,
           TP_TCN0_N0_OPCG_REG1_MISR_B_VAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_B_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_MISR_B_VAL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT,
           TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT,
           TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT]

//>> GET_[TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT,
           TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_MISR_INIT_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]

//>> SET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]

//>> SET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]

//>> CLEAR_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]

//>> GET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]

//>> GET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]
static inline bool GET_TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_SCAN_CLK_USE_EVEN]

//>> SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]

//>> CLEAR_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]
static inline bool GET_TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_FCE_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]

//>> CLEAR_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]

//>> GET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]

//>> GET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]
static inline bool GET_TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_RTIM_THOLD_FORCE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]

//>> CLEAR_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]
static inline bool GET_TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_DISABLE_ARY_CLK_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]

//>> CLEAR_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]
static inline bool GET_TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_SG_HIGH_DURING_FILL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL,
           TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL,
           TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL]

//>> GET_[TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL,
           TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_LBIST_SKITTER_CTL]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_MISR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_MISR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_REG1_MISR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]

//>> CLEAR_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_REG1_MISR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_REG1_MISR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]

//>> GET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_MISR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_MISR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]

//>> GET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]
static inline bool GET_TP_TCN0_N0_OPCG_REG1_MISR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_REG1_MISR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_MISR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_MISR_MODE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_INFINITE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_INFINITE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_INFINITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_INFINITE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_INFINITE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_INFINITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_INFINITE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_REG1_INFINITE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_INFINITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]

//>> CLEAR_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_REG1_INFINITE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_REG1_INFINITE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_INFINITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]

//>> GET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_INFINITE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_INFINITE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_INFINITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]

//>> GET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]
static inline bool GET_TP_TCN0_N0_OPCG_REG1_INFINITE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_REG1_INFINITE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_INFINITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_INFINITE_MODE]

//>> SET_[TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT,
           TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT]

//>> SET_[TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT,
           TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT]

//>> GET_[TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_REG1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT,
           TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_REG1_NSL_FILL_COUNT]

//>> PREP_[TP_TCN0_N0_TRA0_TR0_CONFIG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR0_CONFIG_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_CONFIG_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR0_CONFIG_0]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR0_CONFIG_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_CONFIG_0;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR0_CONFIG_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0]

//>> PUT_[TP_TCN0_N0_TRA0_TR0_CONFIG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR0_CONFIG_0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_0));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR0_CONFIG_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR0_CONFIG_0]


//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_0));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63,
           TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]

//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_0));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63,
           TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_0));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63,
           TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]

//>> PREP_[TP_TCN0_N0_TRA0_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR1_CONFIG]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR1_CONFIG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG]

//>> PUT_[TP_TCN0_N0_TRA0_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR1_CONFIG]


//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> PREP_[TP_TCN0_N0_TRA0_TR1_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR1_CONFIG_9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR1_CONFIG_9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR1_CONFIG_9]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR1_CONFIG_9;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR1_CONFIG_9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9]

//>> PUT_[TP_TCN0_N0_TRA0_TR1_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR1_CONFIG_9(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR1_CONFIG_9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR1_CONFIG_9]


//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHA_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHB_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHC_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCHD_MUXSEL]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_OR_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_AND_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_OR_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_AND_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_MATCH_NOT_MODE]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]
static inline bool GET_TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_9_SPARE_LT]

//>> PREP_[TP_TCN0_N0_TRA1_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA1_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA1_TR0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA1_TR0_CONFIG]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA1_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA1_TR0_CONFIG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA1_TR0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG]

//>> PUT_[TP_TCN0_N0_TRA1_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA1_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA1_TR0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA1_TR0_CONFIG]


//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline bool GET_TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> PREP_[TP_TCN1_N1_CLOCK_STAT_NSL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CLOCK_STAT_NSL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CLOCK_STAT_NSL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CLOCK_STAT_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CLOCK_STAT_NSL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CLOCK_STAT_NSL;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CLOCK_STAT_NSL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL]

//>> PUT_[TP_TCN1_N1_CLOCK_STAT_NSL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CLOCK_STAT_NSL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CLOCK_STAT_NSL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CLOCK_STAT_NSL]


//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_PERV_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT1_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT2_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT3_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT4_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT5_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT6_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT7_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT8_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT9_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT10_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT11_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT12_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT13_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]

//>> SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]

//>> CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]

//>> GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]
static inline bool GET_TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CLOCK_STAT_NSL_UNIT14_NSL]

//>> PREP_[TP_TCN1_N1_CPLT_CTRL5_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CTRL5_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL5_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CTRL5_RW]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CTRL5_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL5_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CTRL5_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_RW]

//>> PUT_[TP_TCN1_N1_CPLT_CTRL5_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CTRL5_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CTRL5_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CTRL5_RW]

//>> PREP_[TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR]

//>> PUT_[TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR]

//>> PREP_[TP_TCN1_N1_CPLT_CTRL5_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CTRL5_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL5_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CTRL5_WO_OR]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CTRL5_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL5_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CTRL5_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_WO_OR]

//>> PUT_[TP_TCN1_N1_CPLT_CTRL5_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CTRL5_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CTRL5_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CTRL5_WO_OR]


//>> SET_[TP_TCN1_N1_CPLT_CTRL5_0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_0]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_0]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_0]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_0]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_0]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_0]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_0]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_0]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_1]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_1]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_1]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_1]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_1]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_1]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_1]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_2]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_2]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_2]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_2]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_2]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_2]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_2]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_3]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_3]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_3]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_3]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_3]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_3]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_3]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_3]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_3]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_4]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_4]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_4]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_4]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_4]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_4]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_4]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_4]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_4]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_5]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_5]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_5]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_5]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_5]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_5]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_5]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_5]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_5]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_6]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_6]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_6]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_6]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_6]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_6]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_6]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_6]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_6]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_7]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_7]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_7]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_7]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_7]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_7]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_7]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_7]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_7]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_8]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_8]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_8]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_8]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_8]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_8]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_8]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_8]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_8]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_9]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_9]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_9]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_9]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_9]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_9]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_9]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_9]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_9]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_10]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_10]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_10]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_10]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_10]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_10]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_10]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_11]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_11]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_11]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_11]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_11]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_11]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_11]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_12]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_12]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_12]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_12]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_12]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_12]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_12]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_13]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_13]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_13]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_13]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_13]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_13]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_13]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_14]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_14]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_14]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_14]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_14]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_14]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_14]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_15]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_15]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_15]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_15]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_15]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_15]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_15]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_16]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_16]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_16]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_16]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_16]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_16]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_16]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_16]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_16]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_17]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_17]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_17]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_17]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_17]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_17]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_17]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_17]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_17]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_18]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_18]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_18]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_18]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_18]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_18]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_18]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_18]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_18]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_19]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL5_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_19]

//>> SET_[TP_TCN1_N1_CPLT_CTRL5_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL5_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL5_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL5_19]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL5_19]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL5_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL5_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL5_19]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_19]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL5_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL5_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_19]

//>> GET_[TP_TCN1_N1_CPLT_CTRL5_19]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL5_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL5_RW, TP_TCN1_N1_CPLT_CTRL5_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL5_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL5_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL5_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL5_19]

//>> PREP_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG]

//>> PUT_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG]


//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline bool GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline bool GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline bool GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline bool GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT,
           TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT,
           TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT,
           TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline bool GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
CLEAR_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline bool GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT,
           TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]

//>> SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT,
           TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]

//>> GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT,
           TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]

//>> PREP_[TP_TCN1_N1_OPCG_REG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_OPCG_REG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_OPCG_REG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_OPCG_REG0]

//>> GET_[TP_TCN1_N1_OPCG_REG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_OPCG_REG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_OPCG_REG0;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_OPCG_REG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0]

//>> PUT_[TP_TCN1_N1_OPCG_REG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_OPCG_REG0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_OPCG_REG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_OPCG_REG0]


//>> SET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUNN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUNN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUNN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUNN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUNN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_RUNN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_RUNN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_RUNN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_RUNN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_RUNN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_RUNN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_RUNN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUNN_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_GO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_OPCG_GO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_OPCG_GO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_GO]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_SCAN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUN_SCAN0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_SCAN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_SCAN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUN_SCAN0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_SCAN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_SCAN0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_RUN_SCAN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_SCAN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_RUN_SCAN0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_RUN_SCAN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_SCAN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_RUN_SCAN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_RUN_SCAN0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_SCAN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_RUN_SCAN0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_RUN_SCAN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_SCAN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUN_SCAN0]

//>> SET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_SCAN0_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_SCAN0_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_SCAN0_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_SCAN0_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_SCAN0_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_SCAN0_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_SCAN0_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_SCAN0_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_SCAN0_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_SCAN0_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_SCAN0_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_SCAN0_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_SCAN0_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_SCAN0_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_SCAN0_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_SCAN0_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_SCAN0_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_SCAN0_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_SCAN0_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_SLAVE_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_IN_MASTER_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_KEEP_MS_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]

//>> SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]

//>> SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]

//>> GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]

//>> GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT0_SYNC_LVL]

//>> SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]

//>> SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]

//>> SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]

//>> GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]

//>> GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_TRIGGER_OPCG_ON_UNIT1_SYNC_LVL]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_UPDATE_DR]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUN_OPCG_ON_CAPTURE_DR]

//>> SET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]

//>> SET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]

//>> SET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]

//>> GET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]

//>> GET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_STOP_RUNN_ON_XSTOP]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]

//>> SET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]

//>> GET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_OPCG_STARTS_BIST]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]

//>> SET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]

//>> GET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]
static inline bool GET_TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_RUNN_HLD_DLY_EN]

//>> SET_[TP_TCN1_N1_OPCG_REG0_LOOP_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_LOOP_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_LOOP_COUNT,
           TP_TCN1_N1_OPCG_REG0_LOOP_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_LOOP_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_LOOP_COUNT]

//>> SET_[TP_TCN1_N1_OPCG_REG0_LOOP_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG0_LOOP_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG0_LOOP_COUNT,
           TP_TCN1_N1_OPCG_REG0_LOOP_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_LOOP_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG0_LOOP_COUNT]

//>> GET_[TP_TCN1_N1_OPCG_REG0_LOOP_COUNT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG0_LOOP_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG0_LOOP_COUNT,
           TP_TCN1_N1_OPCG_REG0_LOOP_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG0_LOOP_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG0_LOOP_COUNT]

//>> PREP_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG]

//>> GET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG]

//>> PUT_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG]


//>> SET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> SET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> GET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> PREP_[TP_TCN1_N1_TRA0_TR1_CONFIG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA0_TR1_CONFIG_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_CONFIG_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA0_TR1_CONFIG_1]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA0_TR1_CONFIG_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_CONFIG_1;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA0_TR1_CONFIG_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1]

//>> PUT_[TP_TCN1_N1_TRA0_TR1_CONFIG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA0_TR1_CONFIG_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_1));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA0_TR1_CONFIG_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA0_TR1_CONFIG_1]


//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87,
           TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87]

//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87,
           TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87,
           TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87]

//>> PREP_[TP_TCN1_N1_TRA2_TR0_CONFIG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA2_TR0_CONFIG_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_CONFIG_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA2_TR0_CONFIG_0]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA2_TR0_CONFIG_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_CONFIG_0;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA2_TR0_CONFIG_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0]

//>> PUT_[TP_TCN1_N1_TRA2_TR0_CONFIG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA2_TR0_CONFIG_0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_0));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA2_TR0_CONFIG_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA2_TR0_CONFIG_0]


//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63,
           TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_0));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63,
           TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_0));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63,
           TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63]

//>> PREP_[TP_TCN1_N1_TRA2_TR1_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA2_TR1_CONFIG_9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR1_CONFIG_9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA2_TR1_CONFIG_9]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR1_CONFIG_9;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA2_TR1_CONFIG_9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9]

//>> PUT_[TP_TCN1_N1_TRA2_TR1_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA2_TR1_CONFIG_9(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA2_TR1_CONFIG_9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA2_TR1_CONFIG_9]


//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHA_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHB_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHC_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCHD_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_MATCH_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]
static inline bool GET_TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_9_SPARE_LT]

//>> PREP_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG]

//>> PUT_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG]


//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> PREP_[TP_TCN1_N1_TRA4_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA4_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA4_TR1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA4_TR1_CONFIG]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA4_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA4_TR1_CONFIG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA4_TR1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG]

//>> PUT_[TP_TCN1_N1_TRA4_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA4_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA4_TR1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA4_TR1_CONFIG]


//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline bool GET_TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> PREP_[TP_TCN1_N1_TRA5_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA5_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA5_TR0_CONFIG]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA5_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR0_CONFIG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA5_TR0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG]

//>> PUT_[TP_TCN1_N1_TRA5_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA5_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA5_TR0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA5_TR0_CONFIG]


//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline bool GET_TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> PREP_[TP_TCN1_N1_TRA5_TR0_CONFIG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA5_TR0_CONFIG_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR0_CONFIG_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA5_TR0_CONFIG_1]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA5_TR0_CONFIG_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR0_CONFIG_1;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA5_TR0_CONFIG_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1]

//>> PUT_[TP_TCN1_N1_TRA5_TR0_CONFIG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA5_TR0_CONFIG_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_1));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA5_TR0_CONFIG_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA5_TR0_CONFIG_1]


//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87,
           TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87,
           TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87,
           TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_1_CMP_MSK_LT_B_64_TO_87]

//>> PREP_[TP_TCN1_N1_TRA7_TR0_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA7_TR0_CONFIG_9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA7_TR0_CONFIG_9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA7_TR0_CONFIG_9]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA7_TR0_CONFIG_9;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA7_TR0_CONFIG_9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9]

//>> PUT_[TP_TCN1_N1_TRA7_TR0_CONFIG_9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA7_TR0_CONFIG_9(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA7_TR0_CONFIG_9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA7_TR0_CONFIG_9]


//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DISABLE_COMPRESSION]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHA_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHB_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHC_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCHD_MUXSEL]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_OR_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_AND_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE,
           TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_MATCH_NOT_MODE]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_MASK]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_ERROR_CMP_PATTERN]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG0_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_TRIG1_ERR_CMP]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]

//>> CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]
static inline bool GET_TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_9));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_9_SPARE_LT]

//>> PREP_[TP_TCN1_N1_XSTOP3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_XSTOP3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_XSTOP3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_XSTOP3]

//>> GET_[TP_TCN1_N1_XSTOP3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_XSTOP3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_XSTOP3;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_XSTOP3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3]

//>> PUT_[TP_TCN1_N1_XSTOP3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_XSTOP3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_XSTOP3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_XSTOP3]


//>> SET_[TP_TCN1_N1_XSTOP3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_ENABLE]

//>> SET_[TP_TCN1_N1_XSTOP3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_ENABLE]

//>> SET_[TP_TCN1_N1_XSTOP3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_ENABLE]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_ENABLE]

//>> GET_[TP_TCN1_N1_XSTOP3_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_ENABLE]

//>> GET_[TP_TCN1_N1_XSTOP3_ENABLE]
static inline bool GET_TP_TCN1_N1_XSTOP3_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_ENABLE]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_SNOPA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]

//>> GET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_WAIT_SNOPA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]

//>> GET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]
static inline bool GET_TP_TCN1_N1_XSTOP3_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_WAIT_SNOPA]

//>> SET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]

//>> GET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]

//>> GET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]
static inline bool GET_TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_ALWAYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]

//>> GET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_WAIT_ALWAYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]

//>> GET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]
static inline bool GET_TP_TCN1_N1_XSTOP3_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_WAIT_ALWAYS]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_PERV]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_PERV]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_PERV]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_PERV]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_PERV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_PERV]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_PERV]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_PERV]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT1]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT2]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT3]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT4]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT5]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT6]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT7]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT8]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT9]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT10]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT11]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT12]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT13]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]

//>> SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP3_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]

//>> CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP3_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP3_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_REGION_UNIT14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]

//>> GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]
static inline bool GET_TP_TCN1_N1_XSTOP3_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP3_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_REGION_UNIT14]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_WAIT_CYCLES,
           TP_TCN1_N1_XSTOP3_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_CYCLES]

//>> SET_[TP_TCN1_N1_XSTOP3_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP3_WAIT_CYCLES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP3_WAIT_CYCLES,
           TP_TCN1_N1_XSTOP3_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP3_WAIT_CYCLES]

//>> GET_[TP_TCN1_N1_XSTOP3_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP3_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP3_WAIT_CYCLES,
           TP_TCN1_N1_XSTOP3_WAIT_CYCLES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP3_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP3_WAIT_CYCLES]

//>> PREP_[TP_TPBR_AD_LPC_STATUS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_AD_LPC_STATUS_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_LPC_STATUS_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_AD_LPC_STATUS_REG]

//>> GET_[TP_TPBR_AD_LPC_STATUS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_AD_LPC_STATUS_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_LPC_STATUS_REG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_AD_LPC_STATUS_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_STATUS_REG]

//>> PUT_[TP_TPBR_AD_LPC_STATUS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_AD_LPC_STATUS_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_AD_LPC_STATUS_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_AD_LPC_STATUS_REG]


//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]

//>> CLEAR_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]

//>> GET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]

//>> GET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]
static inline bool GET_TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_STATUS_REG_DONE_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]

//>> CLEAR_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]

//>> GET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]

//>> GET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]
static inline bool GET_TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_STATUS_REG_VALID_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]

//>> SET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]

//>> CLEAR_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]

//>> GET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]

//>> GET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]
static inline bool GET_TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_STATUS_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_STATUS_REG_ACK_STATUS]

//>> PREP_[TP_TPBR_PBA_PBAF_PBAFIRACT0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAF_PBAFIRACT0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIRACT0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAF_PBAFIRACT0]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIRACT0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAF_PBAFIRACT0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIRACT0;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAF_PBAFIRACT0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIRACT0]

//>> PUT_[TP_TPBR_PBA_PBAF_PBAFIRACT0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAF_PBAFIRACT0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIRACT0));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAF_PBAFIRACT0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAF_PBAFIRACT0]


//>> SET_[TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIRACT0));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0,
           TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIRACT0));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0,
           TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIRACT0));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0,
           TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIRACT0_PBAFIRACT0_FIR_ACTION0]

//>> PREP_[TP_TPBR_PBA_PBAO_PBAERRRPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_PBAERRRPT2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAERRRPT2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_PBAERRRPT2]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_PBAERRRPT2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAERRRPT2;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_PBAERRRPT2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2]

//>> PUT_[TP_TPBR_PBA_PBAO_PBAERRRPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_PBAERRRPT2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_PBAERRRPT2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_PBAERRRPT2]


//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_SLV_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCDE_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_BCUE_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_BAR_PARITY_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXPUSH_WRERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAERRRPT2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR,
           TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAERRRPT2_CERR_AXIPUSH_WRERR]

//>> PREP_[TP_TPBR_PBA_PBAO_PBAOCR2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_PBAOCR2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAOCR2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_PBAOCR2]

//>> GET_[TP_TPBR_PBA_PBAO_PBAOCR2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_PBAOCR2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAOCR2;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_PBAOCR2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAOCR2]

//>> PUT_[TP_TPBR_PBA_PBAO_PBAOCR2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_PBAOCR2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAOCR2));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_PBAOCR2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_PBAOCR2]


//>> SET_[TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAOCR2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT,
           TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT]

//>> SET_[TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAOCR2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT,
           TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT]

//>> GET_[TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAOCR2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT,
           TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAOCR2_PBAOCR2_COUNT]

//>> PREP_[TP_TPBR_PBA_PBAO_PBARBUFVAL5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_PBARBUFVAL5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBARBUFVAL5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_PBARBUFVAL5]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBARBUFVAL5;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_PBARBUFVAL5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5]

//>> PUT_[TP_TPBR_PBA_PBAO_PBARBUFVAL5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_PBARBUFVAL5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_PBARBUFVAL5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_PBARBUFVAL5]


//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_RD_SLVNUM]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_CUR_RD_ADDR]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]
static inline bool GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_PREFETCH]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]
static inline bool GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_ABORT]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_BUFFER_STATUS]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID]

//>> SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID]

//>> GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBARBUFVAL5));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID,
           TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBARBUFVAL5_MASTERID]

//>> PREP_[TP_TPBR_PBA_PBAO_PBASLVCTL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_PBASLVCTL2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBASLVCTL2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_PBASLVCTL2]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_PBASLVCTL2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBASLVCTL2;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_PBASLVCTL2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2]

//>> PUT_[TP_TPBR_PBA_PBAO_PBASLVCTL2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_PBASLVCTL2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_PBASLVCTL2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_PBASLVCTL2]


//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_ENABLE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_MATCH_VALUE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_4]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_MID_CARE_MASK]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TTYPE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_11_14]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_TTYPE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_READ_PREFETCH_CTL]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_INVALIDATE_CTL]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_W]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_A]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_B]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_BUF_ALLOC_C]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_23]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_DIS_WRITE_GATHER]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WR_GATHER_TIMEOUT]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_WRITE_TSIZE]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR,
           TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_EXTADDR]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]

//>> SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]

//>> GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]
static inline bool GET_TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBASLVCTL2));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBASLVCTL2_RESERVED_50]

//>> PREP_[TP_TPBR_PBA_PBAO_PBAXCFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_PBAXCFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAXCFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_PBAXCFG]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_PBAXCFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAXCFG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_PBAXCFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG]

//>> PUT_[TP_TPBR_PBA_PBAO_PBAXCFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_PBAXCFG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_PBAXCFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_PBAXCFG]


//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_PBAX_EN]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVATION_EN]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RESET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_RESET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_GROUPID]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_CHIPID]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_11]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_BRDCST_GROUP]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV,
           TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RCV_DATATO_DIV]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26,
           TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26,
           TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26,
           TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_RESERVED_25_26]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_COUNT_OVERCOM]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH,
           TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH,
           TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH,
           TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RETRY_THRESH]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV,
           TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV,
           TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXCFG));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV,
           TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXCFG_SND_RSVTO_DIV]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
