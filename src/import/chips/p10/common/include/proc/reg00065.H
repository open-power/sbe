/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00065.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00065_H_
#define __PROC_REG00065_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[INT_CQ_FIRMASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_FIRMASK_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIRMASK_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_FIRMASK_RW]

//>> GET_[INT_CQ_FIRMASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_FIRMASK_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIRMASK_RW;
#endif
    return fapi2::getScom(i_target, INT_CQ_FIRMASK_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_FIRMASK_RW]

//>> PUT_[INT_CQ_FIRMASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_FIRMASK_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_FIRMASK_RW, INT_CQ_FIRMASK_WO_AND, INT_CQ_FIRMASK_WO_OR));
#endif
    return fapi2::putScom(i_target, INT_CQ_FIRMASK_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_FIRMASK_RW]

//>> PREP_[INT_CQ_FIRMASK_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_FIRMASK_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIRMASK_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_FIRMASK_WO_AND]

//>> GET_[INT_CQ_FIRMASK_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_FIRMASK_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIRMASK_WO_AND;
#endif
    return fapi2::getScom(i_target, INT_CQ_FIRMASK_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_FIRMASK_WO_AND]

//>> PUT_[INT_CQ_FIRMASK_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_FIRMASK_WO_AND(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_FIRMASK_RW, INT_CQ_FIRMASK_WO_AND, INT_CQ_FIRMASK_WO_OR));
#endif
    return fapi2::putScom(i_target, INT_CQ_FIRMASK_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_FIRMASK_WO_AND]

//>> PREP_[INT_CQ_FIRMASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_FIRMASK_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIRMASK_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_FIRMASK_WO_OR]

//>> GET_[INT_CQ_FIRMASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_FIRMASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIRMASK_WO_OR;
#endif
    return fapi2::getScom(i_target, INT_CQ_FIRMASK_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_FIRMASK_WO_OR]

//>> PUT_[INT_CQ_FIRMASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_FIRMASK_WO_OR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_FIRMASK_RW, INT_CQ_FIRMASK_WO_AND, INT_CQ_FIRMASK_WO_OR));
#endif
    return fapi2::putScom(i_target, INT_CQ_FIRMASK_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_FIRMASK_WO_OR]


//>> SET_[INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIRMASK_RW, INT_CQ_FIRMASK_WO_AND, INT_CQ_FIRMASK_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK,
           INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK]

//>> SET_[INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIRMASK_RW, INT_CQ_FIRMASK_WO_AND, INT_CQ_FIRMASK_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK,
           INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK]

//>> GET_[INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIRMASK_RW, INT_CQ_FIRMASK_WO_AND, INT_CQ_FIRMASK_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK,
           INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_FIRMASK_INT_CQ_FIRMASK_FIR_MASK]

//>> PREP_[INT_CQ_PMC_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PMC_5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_PMC_5]

//>> GET_[INT_CQ_PMC_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PMC_5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_5;
#endif
    return fapi2::getScom(i_target, INT_CQ_PMC_5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_PMC_5]

//>> PUT_[INT_CQ_PMC_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PMC_5(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_5));
#endif
    return fapi2::putScom(i_target, INT_CQ_PMC_5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_PMC_5]


//>> SET_[INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_5));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47,
           INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47]

//>> SET_[INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_5));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47,
           INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47]

//>> GET_[INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_5));
#endif
    return i_data.extractToRight<INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47,
           INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PMC_5_INT_CQ_PMC_5_COUNT_0_47]

//>> PREP_[INT_CQ_SWI_RSP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_SWI_RSP(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_SWI_RSP;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_SWI_RSP]

//>> GET_[INT_CQ_SWI_RSP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_SWI_RSP(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_SWI_RSP;
#endif
    return fapi2::getScom(i_target, INT_CQ_SWI_RSP, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_SWI_RSP]

//>> PUT_[INT_CQ_SWI_RSP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_SWI_RSP(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return fapi2::putScom(i_target, INT_CQ_SWI_RSP, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_SWI_RSP]


//>> SET_[INT_CQ_SWI_RSP_HIST_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_HIST_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_HIST_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_HIST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_HIST_DONE]

//>> SET_[INT_CQ_SWI_RSP_HIST_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_HIST_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_HIST_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_HIST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_HIST_DONE]

//>> SET_[INT_CQ_SWI_RSP_HIST_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_HIST_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_HIST_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_HIST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_HIST_DONE]

//>> CLEAR_[INT_CQ_SWI_RSP_HIST_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_HIST_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_HIST_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_HIST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_HIST_DONE]

//>> GET_[INT_CQ_SWI_RSP_HIST_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_HIST_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_HIST_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_HIST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_HIST_DONE]

//>> GET_[INT_CQ_SWI_RSP_HIST_DONE]
static inline bool GET_INT_CQ_SWI_RSP_HIST_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_HIST_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_HIST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_HIST_DONE]

//>> SET_[INT_CQ_SWI_RSP_POLL_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_POLL_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_POLL_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_POLL_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_POLL_DONE]

//>> SET_[INT_CQ_SWI_RSP_POLL_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_POLL_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_POLL_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_POLL_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_POLL_DONE]

//>> SET_[INT_CQ_SWI_RSP_POLL_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_POLL_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_POLL_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_POLL_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_POLL_DONE]

//>> CLEAR_[INT_CQ_SWI_RSP_POLL_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_POLL_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_POLL_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_POLL_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_POLL_DONE]

//>> GET_[INT_CQ_SWI_RSP_POLL_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_POLL_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_POLL_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_POLL_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_POLL_DONE]

//>> GET_[INT_CQ_SWI_RSP_POLL_DONE]
static inline bool GET_INT_CQ_SWI_RSP_POLL_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_POLL_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_POLL_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_POLL_DONE]

//>> SET_[INT_CQ_SWI_RSP_BCAST_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_BCAST_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_BCAST_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_BCAST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_BCAST_DONE]

//>> SET_[INT_CQ_SWI_RSP_BCAST_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_BCAST_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_BCAST_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_BCAST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_BCAST_DONE]

//>> SET_[INT_CQ_SWI_RSP_BCAST_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_BCAST_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_BCAST_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_BCAST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_BCAST_DONE]

//>> CLEAR_[INT_CQ_SWI_RSP_BCAST_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_BCAST_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_BCAST_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_BCAST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_BCAST_DONE]

//>> GET_[INT_CQ_SWI_RSP_BCAST_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_BCAST_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_BCAST_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_BCAST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_BCAST_DONE]

//>> GET_[INT_CQ_SWI_RSP_BCAST_DONE]
static inline bool GET_INT_CQ_SWI_RSP_BCAST_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_BCAST_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_BCAST_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_BCAST_DONE]

//>> SET_[INT_CQ_SWI_RSP_ASSIGN_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_ASSIGN_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_ASSIGN_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_ASSIGN_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_ASSIGN_DONE]

//>> SET_[INT_CQ_SWI_RSP_ASSIGN_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_ASSIGN_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_ASSIGN_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_ASSIGN_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_ASSIGN_DONE]

//>> SET_[INT_CQ_SWI_RSP_ASSIGN_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_ASSIGN_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_ASSIGN_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_ASSIGN_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_ASSIGN_DONE]

//>> CLEAR_[INT_CQ_SWI_RSP_ASSIGN_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_ASSIGN_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_ASSIGN_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_ASSIGN_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_ASSIGN_DONE]

//>> GET_[INT_CQ_SWI_RSP_ASSIGN_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_ASSIGN_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_ASSIGN_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_ASSIGN_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_ASSIGN_DONE]

//>> GET_[INT_CQ_SWI_RSP_ASSIGN_DONE]
static inline bool GET_INT_CQ_SWI_RSP_ASSIGN_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_ASSIGN_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_ASSIGN_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_ASSIGN_DONE]

//>> SET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_BLK_UPDT_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_BLK_UPDT_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_BLK_UPDT_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]

//>> SET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_BLK_UPDT_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_BLK_UPDT_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_BLK_UPDT_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]

//>> SET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_BLK_UPDT_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_BLK_UPDT_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_BLK_UPDT_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]

//>> CLEAR_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_BLK_UPDT_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_BLK_UPDT_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_BLK_UPDT_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]

//>> GET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_BLK_UPDT_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_BLK_UPDT_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_BLK_UPDT_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]

//>> GET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]
static inline bool GET_INT_CQ_SWI_RSP_BLK_UPDT_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_BLK_UPDT_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_BLK_UPDT_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_BLK_UPDT_DONE]

//>> SET_[INT_CQ_SWI_RSP_Z]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_Z(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_Z,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_Z chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_Z]

//>> SET_[INT_CQ_SWI_RSP_Z]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_Z(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_Z,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_Z chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_Z]

//>> SET_[INT_CQ_SWI_RSP_Z]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_Z(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_Z>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_Z chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_Z]

//>> CLEAR_[INT_CQ_SWI_RSP_Z]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_Z(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_Z>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_Z chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_Z]

//>> GET_[INT_CQ_SWI_RSP_Z]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_Z(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_Z,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_Z chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_Z]

//>> GET_[INT_CQ_SWI_RSP_Z]
static inline bool GET_INT_CQ_SWI_RSP_Z(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_Z>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_Z chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_Z]

//>> SET_[INT_CQ_SWI_RSP_O]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_O(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_O,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_O chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_O]

//>> SET_[INT_CQ_SWI_RSP_O]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_O(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_O,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_O chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_O]

//>> SET_[INT_CQ_SWI_RSP_O]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_O(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_O>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_O chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_O]

//>> CLEAR_[INT_CQ_SWI_RSP_O]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_O(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_O>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_O chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_O]

//>> GET_[INT_CQ_SWI_RSP_O]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_O(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_O,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_O chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_O]

//>> GET_[INT_CQ_SWI_RSP_O]
static inline bool GET_INT_CQ_SWI_RSP_O(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_O>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_O chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_O]

//>> SET_[INT_CQ_SWI_RSP_M]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_M(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_M chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_M]

//>> SET_[INT_CQ_SWI_RSP_M]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_M(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_M,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_M chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_M]

//>> SET_[INT_CQ_SWI_RSP_M]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_M chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_M]

//>> CLEAR_[INT_CQ_SWI_RSP_M]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_M(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_M chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_M]

//>> GET_[INT_CQ_SWI_RSP_M]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_M(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_M,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_M chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_M]

//>> GET_[INT_CQ_SWI_RSP_M]
static inline bool GET_INT_CQ_SWI_RSP_M(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_M>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_M chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_M]

//>> SET_[INT_CQ_SWI_RSP_CRESP_0_4]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_CRESP_0_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_CRESP_0_4,
           INT_CQ_SWI_RSP_CRESP_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_CRESP_0_4]

//>> SET_[INT_CQ_SWI_RSP_CRESP_0_4]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_CRESP_0_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_CRESP_0_4,
           INT_CQ_SWI_RSP_CRESP_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_CRESP_0_4]

//>> GET_[INT_CQ_SWI_RSP_CRESP_0_4]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_CRESP_0_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_CRESP_0_4,
           INT_CQ_SWI_RSP_CRESP_0_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_CRESP_0_4]

//>> SET_[INT_CQ_SWI_RSP_CRESP_RAMP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_CRESP_RAMP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_CRESP_RAMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_RAMP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_CRESP_RAMP]

//>> SET_[INT_CQ_SWI_RSP_CRESP_RAMP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_CRESP_RAMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_CRESP_RAMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_RAMP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_CRESP_RAMP]

//>> SET_[INT_CQ_SWI_RSP_CRESP_RAMP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_CRESP_RAMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_CRESP_RAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_RAMP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_CRESP_RAMP]

//>> CLEAR_[INT_CQ_SWI_RSP_CRESP_RAMP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_CRESP_RAMP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_CRESP_RAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_RAMP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_CRESP_RAMP]

//>> GET_[INT_CQ_SWI_RSP_CRESP_RAMP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_CRESP_RAMP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_CRESP_RAMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_RAMP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_CRESP_RAMP]

//>> GET_[INT_CQ_SWI_RSP_CRESP_RAMP]
static inline bool GET_INT_CQ_SWI_RSP_CRESP_RAMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_CRESP_RAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_CRESP_RAMP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_CRESP_RAMP]

//>> SET_[INT_CQ_SWI_RSP_COLLISON]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_COLLISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_COLLISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_COLLISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_COLLISON]

//>> SET_[INT_CQ_SWI_RSP_COLLISON]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_COLLISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_COLLISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_COLLISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_COLLISON]

//>> SET_[INT_CQ_SWI_RSP_COLLISON]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_COLLISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_COLLISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_COLLISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_COLLISON]

//>> CLEAR_[INT_CQ_SWI_RSP_COLLISON]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_COLLISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_COLLISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_COLLISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_COLLISON]

//>> GET_[INT_CQ_SWI_RSP_COLLISON]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_COLLISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_COLLISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_COLLISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_COLLISON]

//>> GET_[INT_CQ_SWI_RSP_COLLISON]
static inline bool GET_INT_CQ_SWI_RSP_COLLISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_COLLISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_COLLISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_COLLISON]

//>> SET_[INT_CQ_SWI_RSP_PRECLUDE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_PRECLUDE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_PRECLUDE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_PRECLUDE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_PRECLUDE]

//>> SET_[INT_CQ_SWI_RSP_PRECLUDE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_PRECLUDE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_PRECLUDE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_PRECLUDE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_PRECLUDE]

//>> SET_[INT_CQ_SWI_RSP_PRECLUDE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_PRECLUDE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.setBit<INT_CQ_SWI_RSP_PRECLUDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_SWI_RSP_PRECLUDE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_PRECLUDE]

//>> CLEAR_[INT_CQ_SWI_RSP_PRECLUDE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_SWI_RSP_PRECLUDE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.clearBit<INT_CQ_SWI_RSP_PRECLUDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_SWI_RSP_PRECLUDE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_SWI_RSP_PRECLUDE]

//>> GET_[INT_CQ_SWI_RSP_PRECLUDE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_PRECLUDE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_PRECLUDE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_PRECLUDE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_PRECLUDE]

//>> GET_[INT_CQ_SWI_RSP_PRECLUDE]
static inline bool GET_INT_CQ_SWI_RSP_PRECLUDE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.getBit<INT_CQ_SWI_RSP_PRECLUDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_SWI_RSP_PRECLUDE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_PRECLUDE]

//>> SET_[INT_CQ_SWI_RSP_ATAG_0_15]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_ATAG_0_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_ATAG_0_15,
           INT_CQ_SWI_RSP_ATAG_0_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_SWI_RSP_ATAG_0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_ATAG_0_15]

//>> SET_[INT_CQ_SWI_RSP_ATAG_0_15]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_SWI_RSP_ATAG_0_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return o_data.insertFromRight<INT_CQ_SWI_RSP_ATAG_0_15,
           INT_CQ_SWI_RSP_ATAG_0_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_SWI_RSP_ATAG_0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_SWI_RSP_ATAG_0_15]

//>> GET_[INT_CQ_SWI_RSP_ATAG_0_15]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_SWI_RSP_ATAG_0_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_RSP));
#endif
    return i_data.extractToRight<INT_CQ_SWI_RSP_ATAG_0_15,
           INT_CQ_SWI_RSP_ATAG_0_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_SWI_RSP_ATAG_0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_SWI_RSP_ATAG_0_15]

//>> PREP_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_ADDITIONAL_PERF_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_ADDITIONAL_PERF_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_ADDITIONAL_PERF_1;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_ADDITIONAL_PERF_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1]

//>> PUT_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_ADDITIONAL_PERF_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_ADDITIONAL_PERF_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1]


//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]

//>> CLEAR_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]
static inline bool GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P0_IS_IDLE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]

//>> CLEAR_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]
static inline bool GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_P1_IS_IDLE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_2_9]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_PTAG_IN_USE]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_16_27]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_UNLOCK_IN_FIFO]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_OUTSTANDING_WB]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_RESERVED_40_41]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_1_MAX_WAY_NUMBER]

//>> PREP_[INT_PC_NXC_REGS_WATCH0_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH0_SPEC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH0_SPEC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH0_SPEC]

//>> GET_[INT_PC_NXC_REGS_WATCH0_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH0_SPEC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH0_SPEC;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH0_SPEC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH0_SPEC]

//>> PUT_[INT_PC_NXC_REGS_WATCH0_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH0_SPEC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH0_SPEC));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH0_SPEC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH0_SPEC]


//>> PREP_[INT_PC_NXC_REGS_WATCH2_DATA1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH2_DATA1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH2_DATA1]

//>> GET_[INT_PC_NXC_REGS_WATCH2_DATA1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH2_DATA1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA1;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH2_DATA1]

//>> PUT_[INT_PC_NXC_REGS_WATCH2_DATA1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH2_DATA1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH2_DATA1));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH2_DATA1]


//>> PREP_[INT_PC_NXC_REGS_WATCH_ASSIGN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH_ASSIGN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH_ASSIGN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH_ASSIGN]

//>> GET_[INT_PC_NXC_REGS_WATCH_ASSIGN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH_ASSIGN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH_ASSIGN;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH_ASSIGN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH_ASSIGN]

//>> PUT_[INT_PC_NXC_REGS_WATCH_ASSIGN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH_ASSIGN(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH_ASSIGN));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH_ASSIGN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH_ASSIGN]


//>> PREP_[INT_PC_REGS_AIB_TX_CRD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_AIB_TX_CRD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AIB_TX_CRD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_AIB_TX_CRD]

//>> GET_[INT_PC_REGS_AIB_TX_CRD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_AIB_TX_CRD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AIB_TX_CRD;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_AIB_TX_CRD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD]

//>> PUT_[INT_PC_REGS_AIB_TX_CRD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_AIB_TX_CRD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_AIB_TX_CRD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_AIB_TX_CRD]


//>> SET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.setBit<INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]

//>> CLEAR_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.clearBit<INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]
static inline bool GET_INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.getBit<INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_CRD_INIT_REQUEST]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RESERVED_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RESERVED_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RESERVED_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RESERVED_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RESERVED_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.setBit<INT_PC_REGS_AIB_TX_CRD_RESERVED_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]

//>> CLEAR_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_AIB_TX_CRD_RESERVED_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.clearBit<INT_PC_REGS_AIB_TX_CRD_RESERVED_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RESERVED_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RESERVED_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]
static inline bool GET_INT_PC_REGS_AIB_TX_CRD_RESERVED_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.getBit<INT_PC_REGS_AIB_TX_CRD_RESERVED_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_25]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_READ]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_NCKO]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_AT_MACRO]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_PC_CHKO]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL,
           INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL,
           INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL,
           INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_READ_CRD_POOL]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_LD_RMT_VC]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45,
           INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45,
           INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45,
           INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RESERVED_42_45]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_SYNC_WRITE]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_TCTXT_WRITE]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_CHKI]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_DMA_WRITE]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_PC_NCKI]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC,
           INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_RSD_CRD_NXC_ST_RMT_VC]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL,
           INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL]

//>> SET_[INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL,
           INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL]

//>> GET_[INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_CRD));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL,
           INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_CRD_WRITE_CRD_POOL]

//>> PREP_[INT_PC_REGS_DBG_ATX_ORDER_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_DBG_ATX_ORDER_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_ATX_ORDER_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_DBG_ATX_ORDER_2]

//>> GET_[INT_PC_REGS_DBG_ATX_ORDER_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_DBG_ATX_ORDER_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_ATX_ORDER_2;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_DBG_ATX_ORDER_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ATX_ORDER_2]

//>> PUT_[INT_PC_REGS_DBG_ATX_ORDER_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_DBG_ATX_ORDER_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ATX_ORDER_2));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_DBG_ATX_ORDER_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_DBG_ATX_ORDER_2]


//>> PREP_[INT_PC_REGS_NRQ_PEND_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_NRQ_PEND_ARB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_PEND_ARB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_NRQ_PEND_ARB]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_NRQ_PEND_ARB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_PEND_ARB;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_NRQ_PEND_ARB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB]

//>> PUT_[INT_PC_REGS_NRQ_PEND_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_NRQ_PEND_ARB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_NRQ_PEND_ARB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_NRQ_PEND_ARB]


//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_0_1]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_LOAD_RR_SEL]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_PARSE_STORE_RR_SEL]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_6_7]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKO_LD]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKO_LD]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST,
           INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_CFG_NRQ_PEND_ARB_PRIO_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23]

//>> SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23]

//>> GET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_PEND_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23,
           INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_PEND_ARB_RESERVED_16_23]

//>> PREP_[INT_PC_REGS_NVG_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_NVG_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NVG_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_NVG_BLOCK_MODE]

//>> GET_[INT_PC_REGS_NVG_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_NVG_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NVG_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_NVG_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_NVG_BLOCK_MODE]

//>> PUT_[INT_PC_REGS_NVG_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_NVG_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVG_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_NVG_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_NVG_BLOCK_MODE]


//>> SET_[INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVG_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE,
           INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE]

//>> SET_[INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVG_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE,
           INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE]

//>> GET_[INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVG_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE,
           INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NVG_BLOCK_MODE_INT_PC_NVG_BLOCK_MODE]

//>> PREP_[INT_PC_REGS_TCTXT_LSI_SET_01]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_LSI_SET_01(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_LSI_SET_01;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_TCTXT_LSI_SET_01]

//>> GET_[INT_PC_REGS_TCTXT_LSI_SET_01]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_LSI_SET_01(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_LSI_SET_01;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_LSI_SET_01, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_LSI_SET_01]

//>> PUT_[INT_PC_REGS_TCTXT_LSI_SET_01]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_LSI_SET_01(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_LSI_SET_01));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_LSI_SET_01, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_TCTXT_LSI_SET_01]


//>> PREP_[INT_VC_ENDC_WATCH1_DATA3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH1_DATA3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH1_DATA3]

//>> GET_[INT_VC_ENDC_WATCH1_DATA3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH1_DATA3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA3;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH1_DATA3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH1_DATA3]

//>> PUT_[INT_VC_ENDC_WATCH1_DATA3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH1_DATA3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH1_DATA3));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH1_DATA3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH1_DATA3]


//>> PREP_[INT_VC_QUEUES_CFG_REM_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_CFG_REM_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_CFG_REM_2]

//>> GET_[INT_VC_QUEUES_CFG_REM_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_CFG_REM_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_2;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_CFG_REM_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2]

//>> PUT_[INT_VC_QUEUES_CFG_REM_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_CFG_REM_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_CFG_REM_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_CFG_REM_2]


//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_IRQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_ERQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]
static inline bool GET_INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_2));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_2_ERQ_CFG_UPD_PND]

//>> PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_PERF_EVENT_SEL_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_1]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_PERF_EVENT_SEL_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_1;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1]

//>> PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_PERF_EVENT_SEL_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_1]


//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_1_EQA_TO_ENDC]

//>> PREP_[INT_VC_RECOV_ERR_G2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_RECOV_ERR_G2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_RECOV_ERR_G2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_RECOV_ERR_G2]

//>> GET_[INT_VC_RECOV_ERR_G2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_RECOV_ERR_G2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_RECOV_ERR_G2;
#endif
    return fapi2::getScom(i_target, INT_VC_RECOV_ERR_G2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_RECOV_ERR_G2]

//>> PUT_[INT_VC_RECOV_ERR_G2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_RECOV_ERR_G2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G2));
#endif
    return fapi2::putScom(i_target, INT_VC_RECOV_ERR_G2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_RECOV_ERR_G2]


//>> SET_[INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR,
           INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR]

//>> SET_[INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR,
           INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR]

//>> GET_[INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR,
           INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_RECOV_ERR_G2_INT_VC_RECOV_ERR_G2_ERROR]

//>> PREP_[INT_VC_WOF_ERR_G0_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_WOF_ERR_G0_DETAIL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_WOF_ERR_G0_DETAIL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_WOF_ERR_G0_DETAIL]

//>> GET_[INT_VC_WOF_ERR_G0_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_WOF_ERR_G0_DETAIL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_WOF_ERR_G0_DETAIL;
#endif
    return fapi2::getScom(i_target, INT_VC_WOF_ERR_G0_DETAIL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G0_DETAIL]

//>> PUT_[INT_VC_WOF_ERR_G0_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_WOF_ERR_G0_DETAIL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G0_DETAIL));
#endif
    return fapi2::putScom(i_target, INT_VC_WOF_ERR_G0_DETAIL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_WOF_ERR_G0_DETAIL]


//>> SET_[INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G0_DETAIL));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR,
           INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR]

//>> SET_[INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G0_DETAIL));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR,
           INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR]

//>> GET_[INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G0_DETAIL));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR,
           INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G0_DETAIL_INT_VC_WOF_ERR_G0_DETAIL_ERROR]

//>> PREP_[NX_CH4_ADDR_6_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_CH4_ADDR_6_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_6_HASH_FUNCTION_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_CH4_ADDR_6_HASH_FUNCTION_REG]

//>> GET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_CH4_ADDR_6_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_6_HASH_FUNCTION_REG;
#endif
    return fapi2::getScom(i_target, NX_CH4_ADDR_6_HASH_FUNCTION_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG]

//>> PUT_[NX_CH4_ADDR_6_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_CH4_ADDR_6_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_6_HASH_FUNCTION_REG));
#endif
    return fapi2::putScom(i_target, NX_CH4_ADDR_6_HASH_FUNCTION_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_CH4_ADDR_6_HASH_FUNCTION_REG]


//>> SET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_6_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION,
           NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION]

//>> SET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_6_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION,
           NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION]

//>> GET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& GET_NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_6_HASH_FUNCTION_REG));
#endif
    return i_data.extractToRight<NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION,
           NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_CH4_ADDR_6_HASH_FUNCTION_REG_ADDRESS_6_HASH_FUNCTION]

//>> PREP_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_CH4_DATATAG_2_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_DATATAG_2_HASH_FUNCTION_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG]

//>> GET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_CH4_DATATAG_2_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_DATATAG_2_HASH_FUNCTION_REG;
#endif
    return fapi2::getScom(i_target, NX_CH4_DATATAG_2_HASH_FUNCTION_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG]

//>> PUT_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_CH4_DATATAG_2_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_CH4_DATATAG_2_HASH_FUNCTION_REG));
#endif
    return fapi2::putScom(i_target, NX_CH4_DATATAG_2_HASH_FUNCTION_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG]


//>> SET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_DATATAG_2_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION,
           NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION]

//>> SET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_DATATAG_2_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION,
           NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION]

//>> GET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& GET_NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_DATATAG_2_HASH_FUNCTION_REG));
#endif
    return i_data.extractToRight<NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION,
           NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_CH4_DATATAG_2_HASH_FUNCTION_REG_DATATAG_2_HASH_FUNCTION]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MMIO_BAR_MMIO_BAR_ENABLE]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_DEBUG_REG_NXCQ_TRACE_CNTL]

//>> PREP_[NX_PBI_RNG_ST3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_RNG_ST3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_RNG_ST3]

//>> GET_[NX_PBI_RNG_ST3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_RNG_ST3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST3;
#endif
    return fapi2::getScom(i_target, NX_PBI_RNG_ST3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_RNG_ST3]

//>> PUT_[NX_PBI_RNG_ST3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_RNG_ST3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return fapi2::putScom(i_target, NX_PBI_RNG_ST3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_RNG_ST3]


//>> SET_[NX_PBI_RNG_ST3_RRN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_RRN_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_RRN_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST3_RRN_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_RRN_ENABLE]

//>> SET_[NX_PBI_RNG_ST3_RRN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_RRN_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_RRN_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST3_RRN_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_RRN_ENABLE]

//>> SET_[NX_PBI_RNG_ST3_RRN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_RRN_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.setBit<NX_PBI_RNG_ST3_RRN_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_RNG_ST3_RRN_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_RRN_ENABLE]

//>> CLEAR_[NX_PBI_RNG_ST3_RRN_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_RNG_ST3_RRN_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.clearBit<NX_PBI_RNG_ST3_RRN_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_RNG_ST3_RRN_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_RNG_ST3_RRN_ENABLE]

//>> GET_[NX_PBI_RNG_ST3_RRN_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST3_RRN_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST3_RRN_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST3_RRN_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST3_RRN_ENABLE]

//>> GET_[NX_PBI_RNG_ST3_RRN_ENABLE]
static inline bool GET_NX_PBI_RNG_ST3_RRN_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return i_data.getBit<NX_PBI_RNG_ST3_RRN_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_RNG_ST3_RRN_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST3_RRN_ENABLE]

//>> SET_[NX_PBI_RNG_ST3_WINDOW_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_WINDOW_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_WINDOW_SIZE,
           NX_PBI_RNG_ST3_WINDOW_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST3_WINDOW_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_WINDOW_SIZE]

//>> SET_[NX_PBI_RNG_ST3_WINDOW_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_WINDOW_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_WINDOW_SIZE,
           NX_PBI_RNG_ST3_WINDOW_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST3_WINDOW_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_WINDOW_SIZE]

//>> GET_[NX_PBI_RNG_ST3_WINDOW_SIZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST3_WINDOW_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST3_WINDOW_SIZE,
           NX_PBI_RNG_ST3_WINDOW_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST3_WINDOW_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST3_WINDOW_SIZE]

//>> SET_[NX_PBI_RNG_ST3_MATCH_TH_MIN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_MATCH_TH_MIN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_MATCH_TH_MIN,
           NX_PBI_RNG_ST3_MATCH_TH_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST3_MATCH_TH_MIN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_MATCH_TH_MIN]

//>> SET_[NX_PBI_RNG_ST3_MATCH_TH_MIN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_MATCH_TH_MIN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_MATCH_TH_MIN,
           NX_PBI_RNG_ST3_MATCH_TH_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST3_MATCH_TH_MIN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_MATCH_TH_MIN]

//>> GET_[NX_PBI_RNG_ST3_MATCH_TH_MIN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST3_MATCH_TH_MIN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST3_MATCH_TH_MIN,
           NX_PBI_RNG_ST3_MATCH_TH_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST3_MATCH_TH_MIN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST3_MATCH_TH_MIN]

//>> SET_[NX_PBI_RNG_ST3_MATCH_TH_MAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_MATCH_TH_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_MATCH_TH_MAX,
           NX_PBI_RNG_ST3_MATCH_TH_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST3_MATCH_TH_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_MATCH_TH_MAX]

//>> SET_[NX_PBI_RNG_ST3_MATCH_TH_MAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST3_MATCH_TH_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST3_MATCH_TH_MAX,
           NX_PBI_RNG_ST3_MATCH_TH_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST3_MATCH_TH_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST3_MATCH_TH_MAX]

//>> GET_[NX_PBI_RNG_ST3_MATCH_TH_MAX]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST3_MATCH_TH_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST3));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST3_MATCH_TH_MAX,
           NX_PBI_RNG_ST3_MATCH_TH_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST3_MATCH_TH_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST3_MATCH_TH_MAX]

//>> PREP_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL]

//>> GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL]

//>> PUT_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL]


//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_EFT_LO_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> PREP_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB]

//>> PUT_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB]


//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.setBit<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> CLEAR_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.clearBit<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline bool GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.getBit<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> PREP_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR]

//>> PUT_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR]


//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_BAR_GZIP_LO_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> PREP_[PB_COM_SCOM_EN1_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_CFG2]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2]

//>> PUT_[PB_COM_SCOM_EN1_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_CFG2]


//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_AGG_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_AGG_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_G_IND_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_R_IND_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_USE_BURST_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_RATE_THRESH_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_REQ_HOLD_CNT_THRESHOLD_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC0_LIMIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_LINK_DOB_VC1_LIMIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_TOK_INIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_DAT_HORIZONTAL_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_XLINK_MAX_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1,
           PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG2_COM_CR_ALINK_MAX_EN1]

//>> PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR]

//>> PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR]


//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EN1_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_MODE]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE]

//>> PUT_[PB_COM_SCOM_EN1_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_MODE]


//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HOP_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PUMP_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REPRO_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SW_AB_WAIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SP_HW_MARK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_GP_HW_MARK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_NP_HW_MARK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1,
           PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN1]

//>> PREP_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> PREP_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> PREP_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN3]

//>> PREP_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> PREP_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> PREP_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR]

//>> PUT_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR]


//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_CFG2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_CFG2]


//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ1]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_MODE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_MODE]


//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HOP_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PUMP_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REPRO_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SP_HW_MARK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_GP_HW_MARK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_NP_HW_MARK_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1,
           PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ1]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR]


//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT]


//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ5]

//>> PREP_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ6]

//>> PREP_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT]

//>> PUT_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT]


//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> PREP_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG]

//>> PUT_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG]


//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> PREP_[PB_PTLSCOM10_MAILBOX_20_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_MAILBOX_20_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_20_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_MAILBOX_20_REG]

//>> GET_[PB_PTLSCOM10_MAILBOX_20_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_MAILBOX_20_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_20_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_MAILBOX_20_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_20_REG]

//>> PUT_[PB_PTLSCOM10_MAILBOX_20_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_MAILBOX_20_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_20_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_MAILBOX_20_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_MAILBOX_20_REG]


//>> PREP_[PB_PTLSCOM10_MAILBOX_21_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_MAILBOX_21_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_21_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_MAILBOX_21_REG]

//>> GET_[PB_PTLSCOM10_MAILBOX_21_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_MAILBOX_21_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_21_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_MAILBOX_21_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_21_REG]

//>> PUT_[PB_PTLSCOM10_MAILBOX_21_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_MAILBOX_21_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_21_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_MAILBOX_21_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_MAILBOX_21_REG]


//>> PREP_[PB_PTLSCOM10_MAILBOX_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_MAILBOX_CTL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_CTL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_MAILBOX_CTL_REG]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_MAILBOX_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_CTL_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_MAILBOX_CTL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG]

//>> PUT_[PB_PTLSCOM10_MAILBOX_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_MAILBOX_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_MAILBOX_CTL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_MAILBOX_CTL_REG]


//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_VALID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_CORRUPT]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SENT]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_RESET]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]

//>> CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]
static inline bool GET_PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_AILBOX_ID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID,
           PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID,
           PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID,
           PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_LINK_ID]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE,
           PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE]

//>> SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE,
           PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE]

//>> GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE,
           PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_CTL_REG_B_SPARE]

//>> PREP_[PB_PTLSCOM10_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU3_CNPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_PMU3_CNPM_COUNTER]

//>> GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU3_CNPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PMU3_CNPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER]

//>> PUT_[PB_PTLSCOM10_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PMU3_CNPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_PMU3_CNPM_COUNTER]


//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_0]

//>> GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_1]

//>> GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_2]

//>> GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_3]

//>> SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_3]

//>> GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU3_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM10_PMU3_CNPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU3_CNPM_COUNTER_3]

//>> PREP_[PB_PTLSCOM10_PSAVE23_MODE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PSAVE23_MODE_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PSAVE23_MODE_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_PSAVE23_MODE_CFG]

//>> GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PSAVE23_MODE_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PSAVE23_MODE_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PSAVE23_MODE_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG]

//>> PUT_[PB_PTLSCOM10_PSAVE23_MODE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PSAVE23_MODE_CFG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PSAVE23_MODE_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_PSAVE23_MODE_CFG]


//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE]

//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE]

//>> GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MODE]

//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH]

//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH]

//>> GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_WIDTH]

//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE]

//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE]

//>> GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_SPARE]

//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC]

//>> SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC]

//>> GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PSAVE23_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PSAVE23_MODE_CFG_MIN_RAND_UC]

//>> PREP_[PB_PTLSCOM10_TL_LINK_SYN_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_TL_LINK_SYN_01_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_SYN_01_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_TL_LINK_SYN_01_REG]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_SYN_01_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_TL_LINK_SYN_01_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG]

//>> PUT_[PB_PTLSCOM10_TL_LINK_SYN_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_TL_LINK_SYN_01_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_TL_LINK_SYN_01_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_TL_LINK_SYN_01_REG]


//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_0_SCOM_SYN3]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_01_REG_1_SCOM_SYN3]

//>> PREP_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG]

//>> PUT_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG]


//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> PREP_[PB_PTLSCOM23_PMU1_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PMU1_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU1_CNPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_PMU1_CNPM_COUNTER]

//>> GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PMU1_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU1_CNPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PMU1_CNPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER]

//>> PUT_[PB_PTLSCOM23_PMU1_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PMU1_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PMU1_CNPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_PMU1_CNPM_COUNTER]


//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_0,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_0,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_0]

//>> GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_0,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_1,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_1,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_1]

//>> GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_1,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_2,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_2,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_2]

//>> GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_2,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_3,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_3]

//>> SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_3,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_3]

//>> GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU1_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU1_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU1_CNPM_COUNTER_3,
           PB_PTLSCOM23_PMU1_CNPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU1_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU1_CNPM_COUNTER_3]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
