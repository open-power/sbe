/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00043.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019                             */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00043_H_
#define __PROC_REG00043_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_FIR_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIR_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_FIR_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIR_RW;
#endif
    return fapi2::getScom(i_target, INT_CQ_FIR_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_FIR_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return fapi2::putScom(i_target, INT_CQ_FIR_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_FIR_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIR_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_FIR_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIR_WO_AND;
#endif
    return fapi2::getScom(i_target, INT_CQ_FIR_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_FIR_WO_AND(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return fapi2::putScom(i_target, INT_CQ_FIR_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_FIR_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIR_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_FIR_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_FIR_WO_OR;
#endif
    return fapi2::getScom(i_target, INT_CQ_FIR_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_FIR_WO_OR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return fapi2::putScom(i_target, INT_CQ_FIR_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PI_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PI_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PI_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PI_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PI_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PI_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PI_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PI_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PI_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PI_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PI_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PI_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PI_ECC_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PI_ECC_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PI_ECC_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PI_ECC_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PI_ECC_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PI_ECC_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PI_ECC_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PI_ECC_SUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PI_ECC_SUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PI_ECC_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PI_ECC_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDI_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDI_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDI_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDI_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDI_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PBDI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PBDI_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PBDI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PBDI_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PBDI_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PBDI_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PBDI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDI_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDI_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDI_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDI_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDI_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PBDI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PBDI_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PBDI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PBDI_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PBDI_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PBDI_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PBDI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDO_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDO_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDO_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDO_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDO_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PBDO_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PBDO_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PBDO_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PBDO_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PBDO_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PBDO_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PBDO_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDO_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDO_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDO_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PBDO_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PBDO_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PBDO_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PBDO_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PBDO_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PBDO_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PBDO_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PBDO_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PBDO_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PBDO_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AI_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AI_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AI_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AI_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AI_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_AI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_AI_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_AI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_AI_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_AI_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_AI_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_AI_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AI_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AI_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AI_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AI_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AI_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_AI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_AI_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_AI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_AI_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_AI_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_AI_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_AI_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AI_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_UNSOLICITED_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_UNSOLICITED_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_UNSOLICITED_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_UNSOLICITED_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_UNSOLICITED_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_UNSOLICITED_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_UNSOLICITED_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_UNSOLICITED_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_UNSOLICITED_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_UNSOLICITED_CRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_UNSOLICITED_CRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_UNSOLICITED_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_UNSOLICITED_PBDATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_UNSOLICITED_PBDATA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_PBDATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_UNSOLICITED_PBDATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_UNSOLICITED_PBDATA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_PBDATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_UNSOLICITED_PBDATA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_UNSOLICITED_PBDATA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_PBDATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_UNSOLICITED_PBDATA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_UNSOLICITED_PBDATA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_PBDATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_UNSOLICITED_PBDATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_UNSOLICITED_PBDATA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_PBDATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_UNSOLICITED_PBDATA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_UNSOLICITED_PBDATA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_UNSOLICITED_PBDATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_CRD_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_CRD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_CRD_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_CRD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_CRD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PC_CRD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PC_CRD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PC_CRD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PC_CRD_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PC_CRD_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PC_CRD_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PC_CRD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_CRD_AVAIL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_CRD_AVAIL_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_CRD_AVAIL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PC_CRD_AVAIL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PC_CRD_AVAIL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PC_CRD_AVAIL_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PC_CRD_AVAIL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_CRD_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_CRD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_CRD_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_CRD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_CRD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_VC_CRD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_VC_CRD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_VC_CRD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_VC_CRD_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_VC_CRD_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_VC_CRD_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_VC_CRD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_CRD_AVAIL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_CRD_AVAIL_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_CRD_AVAIL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_VC_CRD_AVAIL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_VC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_VC_CRD_AVAIL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_VC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_VC_CRD_AVAIL_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_VC_CRD_AVAIL_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_VC_CRD_AVAIL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_CRD_AVAIL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_CMD_CTL_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_IN_CMD_CTL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_CMD_CTL_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_IN_CMD_CTL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_CMD_CTL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_AIB_IN_CMD_CTL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_AIB_IN_CMD_CTL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_AIB_IN_CMD_CTL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_AIB_IN_CMD_CTL_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_AIB_IN_CMD_CTL_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_AIB_IN_CMD_CTL_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_AIB_IN_CMD_CTL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_CMD_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_IN_CMD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_CMD_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_IN_CMD_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_CMD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_AIB_IN_CMD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_AIB_IN_CMD_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_AIB_IN_CMD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_AIB_IN_CMD_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_AIB_IN_CMD_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_AIB_IN_CMD_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_AIB_IN_CMD_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_CMD_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_DAT_CTL_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_IN_DAT_CTL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_DAT_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_DAT_CTL_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_IN_DAT_CTL_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_DAT_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_IN_DAT_CTL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_AIB_IN_DAT_CTL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_DAT_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_AIB_IN_DAT_CTL_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_AIB_IN_DAT_CTL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_DAT_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_AIB_IN_DAT_CTL_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_AIB_IN_DAT_CTL_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_DAT_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_AIB_IN_DAT_CTL_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_AIB_IN_DAT_CTL_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_IN_DAT_CTL_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PB_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PB_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PB_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PB_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PB_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PB_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PB_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PB_RCMDX_CI_ERR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PB_RCMDX_CI_ERR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PB_RCMDX_CI_ERR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PB_RCMDX_CI_ERR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PB_RCMDX_CI_ERR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PB_RCMDX_CI_ERR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PB_RCMDX_CI_ERR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PB_RCMDX_CI_ERR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PB_RCMDX_CI_ERR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PB_RCMDX_CI_ERR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PB_RCMDX_CI_ERR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PB_RCMDX_CI_ERR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PB_RCMDX_CI_ERR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PB_RCMDX_CI_ERR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PB_RCMDX_CI_ERR3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PB_RCMDX_CI_ERR3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PB_RCMDX_CI_ERR3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PB_RCMDX_CI_ERR3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PB_RCMDX_CI_ERR3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PB_RCMDX_CI_ERR3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PB_RCMDX_CI_ERR3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PB_RCMDX_CI_ERR4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PB_RCMDX_CI_ERR4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_PB_RCMDX_CI_ERR4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_PB_RCMDX_CI_ERR4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_PB_RCMDX_CI_ERR4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PB_RCMDX_CI_ERR4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PB_RCMDX_CI_ERR4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_PB_RCMDX_CI_ERR4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_PB_RCMDX_CI_ERR4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PB_RCMDX_CI_ERR4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_MRT_ERR_NOT_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_MRT_ERR_NOT_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_NOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_MRT_ERR_NOT_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_MRT_ERR_NOT_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_NOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_MRT_ERR_NOT_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_MRT_ERR_NOT_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_NOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_MRT_ERR_NOT_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_MRT_ERR_NOT_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_NOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_MRT_ERR_NOT_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_MRT_ERR_NOT_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_NOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_MRT_ERR_NOT_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_MRT_ERR_NOT_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_NOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_MRT_ERR_PSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_MRT_ERR_PSIZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_PSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_MRT_ERR_PSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_MRT_ERR_PSIZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_PSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_MRT_ERR_PSIZE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_MRT_ERR_PSIZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_PSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_MRT_ERR_PSIZE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_MRT_ERR_PSIZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_PSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_MRT_ERR_PSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_MRT_ERR_PSIZE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_PSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_MRT_ERR_PSIZE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_MRT_ERR_PSIZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_MRT_ERR_PSIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_SCOM_S_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_SCOM_S_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_SCOM_S_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_SCOM_S_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_SCOM_S_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_SCOM_S_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_SCOM_S_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_SCOM_S_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_SCOM_S_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_SCOM_S_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_SCOM_S_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_SCOM_S_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_SCOM_S_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_SCOM_S_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_SCOM_S_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_SCOM_S_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_SCOM_S_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_SCOM_S_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_TTT_INVALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_TTT_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_TTT_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_TTT_INVALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_TTT_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_TTT_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_TTT_INVALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_TTT_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_TTT_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_TTT_INVALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_TTT_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_TTT_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_TTT_INVALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_TTT_INVALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_TTT_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_TTT_INVALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_TTT_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_TTT_INVALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_WRQ_OP_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_WRQ_OP_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_WRQ_OP_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_WRQ_OP_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_WRQ_OP_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_WRQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_WRQ_OP_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_WRQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_WRQ_OP_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_WRQ_OP_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_WRQ_OP_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_WRQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_OP_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_OP_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_OP_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_OP_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_OP_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_RDQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_RDQ_OP_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_RDQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_RDQ_OP_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_RDQ_OP_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_RDQ_OP_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_RDQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTQ_OP_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_INTQ_OP_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTQ_OP_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_INTQ_OP_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTQ_OP_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_INTQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_INTQ_OP_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_INTQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_INTQ_OP_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_INTQ_OP_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_INTQ_OP_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_INTQ_OP_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_OP_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_DATA_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_DATA_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_DATA_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_DATA_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_RDQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_RDQ_DATA_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_RDQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_RDQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_RDQ_DATA_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_RDQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_RDQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_STQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_STQ_DATA_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_STQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_STQ_DATA_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_STQ_DATA_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_STQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_STQ_DATA_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_STQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_STQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_STQ_DATA_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_STQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_STQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_STQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_STQ_DATA_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_STQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_STQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_STQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_STQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_LDQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_LDQ_DATA_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_LDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_LDQ_DATA_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_LDQ_DATA_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_LDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_LDQ_DATA_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_LDQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_LDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_LDQ_DATA_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_LDQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_LDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_LDQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_LDQ_DATA_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_LDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_LDQ_DATA_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_LDQ_DATA_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_LDQ_DATA_HANG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_WRQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_WRQ_BAD_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_WRQ_BAD_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_WRQ_BAD_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_WRQ_BAD_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_WRQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_WRQ_BAD_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_WRQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_WRQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_WRQ_BAD_CRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_WRQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_WRQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_WRQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_BAD_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_BAD_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_BAD_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_BAD_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_RDQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_RDQ_BAD_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_RDQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_RDQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_RDQ_BAD_CRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_RDQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_RDQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_INTQ_BAD_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTQ_BAD_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_INTQ_BAD_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTQ_BAD_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_INTQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_INTQ_BAD_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_INTQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_INTQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_INTQ_BAD_CRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_INTQ_BAD_CRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_INTQ_BAD_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTQ_BAD_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_ABORT_TRM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_ABORT_TRM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_ABORT_TRM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_ABORT_TRM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RDQ_ABORT_TRM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_ABORT_TRM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RDQ_ABORT_TRM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_RDQ_ABORT_TRM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_ABORT_TRM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_RDQ_ABORT_TRM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_RDQ_ABORT_TRM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_ABORT_TRM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_RDQ_ABORT_TRM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_RDQ_ABORT_TRM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_ABORT_TRM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_RDQ_ABORT_TRM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_RDQ_ABORT_TRM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RDQ_ABORT_TRM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTR_PROTOCOL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_INTR_PROTOCOL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTR_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTR_PROTOCOL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_INTR_PROTOCOL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTR_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_INTR_PROTOCOL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_INTR_PROTOCOL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTR_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_INTR_PROTOCOL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_INTR_PROTOCOL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTR_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_INTR_PROTOCOL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_INTR_PROTOCOL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTR_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_INTR_PROTOCOL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_INTR_PROTOCOL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_INTR_PROTOCOL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_OP_TARGETED_SECURE_MEM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_OP_TARGETED_SECURE_MEM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_OP_TARGETED_SECURE_MEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_OP_TARGETED_SECURE_MEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_OP_TARGETED_SECURE_MEM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_OP_TARGETED_SECURE_MEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_OP_TARGETED_SECURE_MEM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_OP_TARGETED_SECURE_MEM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_OP_TARGETED_SECURE_MEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_OP_TARGETED_SECURE_MEM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_OP_TARGETED_SECURE_MEM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_OP_TARGETED_SECURE_MEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_OP_TARGETED_SECURE_MEM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_OP_TARGETED_SECURE_MEM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_OP_TARGETED_SECURE_MEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_OP_TARGETED_SECURE_MEM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_OP_TARGETED_SECURE_MEM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_OP_TARGETED_SECURE_MEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_AIB_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_AIB_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_AIB_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_AIB_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_AIB_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_AIB_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_AIB_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_AIB_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_AIB_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_AIB_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_CFG_REG_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_CFG_REG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CFG_REG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_CFG_REG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_CFG_REG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CFG_REG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_CFG_REG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_CFG_REG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CFG_REG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_CFG_REG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_CFG_REG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CFG_REG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_CFG_REG_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_CFG_REG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CFG_REG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_CFG_REG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_CFG_REG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CFG_REG_PERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RESERVED_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RESERVED_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RESERVED_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RESERVED_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_RESERVED_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RESERVED_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_RESERVED_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_RESERVED_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RESERVED_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_RESERVED_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_RESERVED_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RESERVED_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_RESERVED_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_RESERVED_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RESERVED_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_RESERVED_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_RESERVED_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_RESERVED_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_CMD_QX_SEVERE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_CMD_QX_SEVERE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CMD_QX_SEVERE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_CMD_QX_SEVERE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_CMD_QX_SEVERE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CMD_QX_SEVERE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_CMD_QX_SEVERE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.setBit<INT_CQ_FIR_CMD_QX_SEVERE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CMD_QX_SEVERE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_FIR_CMD_QX_SEVERE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.clearBit<INT_CQ_FIR_CMD_QX_SEVERE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CMD_QX_SEVERE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_CMD_QX_SEVERE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_CMD_QX_SEVERE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CMD_QX_SEVERE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_FIR_CMD_QX_SEVERE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.getBit<INT_CQ_FIR_CMD_QX_SEVERE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_CMD_QX_SEVERE_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_FATAL_ERROR_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_FATAL_ERROR_0_3,
           INT_CQ_FIR_PC_FATAL_ERROR_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_FATAL_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_FATAL_ERROR_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_FATAL_ERROR_0_3,
           INT_CQ_FIR_PC_FATAL_ERROR_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_FATAL_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PC_FATAL_ERROR_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PC_FATAL_ERROR_0_3,
           INT_CQ_FIR_PC_FATAL_ERROR_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_FATAL_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_RECOV_ERROR_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_RECOV_ERROR_0_3,
           INT_CQ_FIR_PC_RECOV_ERROR_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_RECOV_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_RECOV_ERROR_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_RECOV_ERROR_0_3,
           INT_CQ_FIR_PC_RECOV_ERROR_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_RECOV_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PC_RECOV_ERROR_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PC_RECOV_ERROR_0_3,
           INT_CQ_FIR_PC_RECOV_ERROR_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_RECOV_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_INFO_ERROR_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_INFO_ERROR_0_3,
           INT_CQ_FIR_PC_INFO_ERROR_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_INFO_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_PC_INFO_ERROR_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_PC_INFO_ERROR_0_3,
           INT_CQ_FIR_PC_INFO_ERROR_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_INFO_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_PC_INFO_ERROR_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_PC_INFO_ERROR_0_3,
           INT_CQ_FIR_PC_INFO_ERROR_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_PC_INFO_ERROR_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_FATAL_ERROR_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_FATAL_ERROR_0_2,
           INT_CQ_FIR_VC_FATAL_ERROR_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_FATAL_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_FATAL_ERROR_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_FATAL_ERROR_0_2,
           INT_CQ_FIR_VC_FATAL_ERROR_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_FATAL_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_VC_FATAL_ERROR_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_VC_FATAL_ERROR_0_2,
           INT_CQ_FIR_VC_FATAL_ERROR_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_FATAL_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_RECOV_ERROR_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_RECOV_ERROR_0_2,
           INT_CQ_FIR_VC_RECOV_ERROR_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_RECOV_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_RECOV_ERROR_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_RECOV_ERROR_0_2,
           INT_CQ_FIR_VC_RECOV_ERROR_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_RECOV_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_VC_RECOV_ERROR_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_VC_RECOV_ERROR_0_2,
           INT_CQ_FIR_VC_RECOV_ERROR_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_RECOV_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_INFO_ERROR_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_INFO_ERROR_0_2,
           INT_CQ_FIR_VC_INFO_ERROR_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_INFO_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_FIR_VC_INFO_ERROR_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return o_data.insertFromRight<INT_CQ_FIR_VC_INFO_ERROR_0_2,
           INT_CQ_FIR_VC_INFO_ERROR_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_INFO_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_FIR_VC_INFO_ERROR_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_FIR_RW, INT_CQ_FIR_WO_AND, INT_CQ_FIR_WO_OR));
#endif
    return i_data.extractToRight<INT_CQ_FIR_VC_INFO_ERROR_0_2,
           INT_CQ_FIR_VC_INFO_ERROR_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_FIR_VC_INFO_ERROR_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PM_CTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PM_CTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PM_CTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PM_CTL;
#endif
    return fapi2::getScom(i_target, INT_CQ_PM_CTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PM_CTL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return fapi2::putScom(i_target, INT_CQ_PM_CTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_ENABLE_0_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_ENABLE_0_7,
           INT_CQ_PM_CTL_ENABLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_ENABLE_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_ENABLE_0_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_ENABLE_0_7,
           INT_CQ_PM_CTL_ENABLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_ENABLE_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PM_CTL_ENABLE_0_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PM_CTL_ENABLE_0_7,
           INT_CQ_PM_CTL_ENABLE_0_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_ENABLE_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_RESET_0_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_RESET_0_7,
           INT_CQ_PM_CTL_RESET_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESET_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_RESET_0_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_RESET_0_7,
           INT_CQ_PM_CTL_RESET_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESET_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PM_CTL_RESET_0_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PM_CTL_RESET_0_7,
           INT_CQ_PM_CTL_RESET_0_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESET_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1,
           INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1,
           INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1,
           INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_SOURCE_SUBUNIT_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4,
           INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4,
           INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4,
           INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_CQ_GROUP_SEL_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_RESERVED_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_RESERVED_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_RESERVED_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.setBit<INT_CQ_PM_CTL_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PM_CTL_RESERVED_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.clearBit<INT_CQ_PM_CTL_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PM_CTL_RESERVED_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PM_CTL_RESERVED_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_CQ_PM_CTL_RESERVED_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return i_data.getBit<INT_CQ_PM_CTL_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7,
           INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7,
           INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PM_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7,
           INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PM_CTL_COUNT_EVERY_CYCLE_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_SWI_CMD5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_SWI_CMD5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_SWI_CMD5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_SWI_CMD5;
#endif
    return fapi2::getScom(i_target, INT_CQ_SWI_CMD5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_SWI_CMD5(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_CMD5));
#endif
    return fapi2::putScom(i_target, INT_CQ_SWI_CMD5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_CONFIG;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_0_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_0_8,
           INT_PC_NXC_REGS_CONFIG_RESERVED_0_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_0_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_0_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_0_8,
           INT_PC_NXC_REGS_CONFIG_RESERVED_0_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_0_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_0_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_0_8,
           INT_PC_NXC_REGS_CONFIG_RESERVED_0_8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_0_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD,
           INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD,
           INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD,
           INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_NRQ_CHKO_LD_SHRD_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_CONFIG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_CONFIG_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_CONFIG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_NXC_REGS_CONFIG_RESERVED_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_CONFIG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD,
           INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD,
           INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD,
           INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_LD_CHKO_SHRD_CRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_16_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_16_17,
           INT_PC_NXC_REGS_CONFIG_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_16_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_16_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_16_17,
           INT_PC_NXC_REGS_CONFIG_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_16_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_16_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_16_17,
           INT_PC_NXC_REGS_CONFIG_RESERVED_16_17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_16_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA,
           INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA,
           INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA,
           INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_CACHE_WAY_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_24_25,
           INT_PC_NXC_REGS_CONFIG_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_24_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_24_25,
           INT_PC_NXC_REGS_CONFIG_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_24_25,
           INT_PC_NXC_REGS_CONFIG_RESERVED_24_25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE,
           INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE,
           INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE,
           INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_PTAG_MAX_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_32_33,
           INT_PC_NXC_REGS_CONFIG_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_32_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_32_33,
           INT_PC_NXC_REGS_CONFIG_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_32_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_32_33,
           INT_PC_NXC_REGS_CONFIG_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_32_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT,
           INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT,
           INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT,
           INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_CHKO_WAIT_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_CONFIG_RESERVED_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_CONFIG_RESERVED_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_CONFIG_RESERVED_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_NXC_REGS_CONFIG_RESERVED_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_CONFIG_RESERVED_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA,
           INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA,
           INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA,
           INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_P0_BACK2BACK_MODE_ENA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_44_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_44_49,
           INT_PC_NXC_REGS_CONFIG_RESERVED_44_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_44_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_44_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_44_49,
           INT_PC_NXC_REGS_CONFIG_RESERVED_44_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_44_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_44_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_44_49,
           INT_PC_NXC_REGS_CONFIG_RESERVED_44_49_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_44_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH,
           INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH,
           INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH,
           INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_ENHANCED_HASH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE,
           INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE,
           INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE,
           INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_BG_SCAN_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_RESERVED_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_RESERVED_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_CONFIG_RESERVED_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_CONFIG_RESERVED_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_CONFIG_RESERVED_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_RESERVED_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_RESERVED_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_NXC_REGS_CONFIG_RESERVED_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_CONFIG_RESERVED_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.setBit<INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.clearBit<INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.getBit<INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED,
           INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED,
           INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_CONFIG));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED,
           INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_CONFIG_MAX_ENTRIES_IN_MODIFIED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_PERF_EVENT_SEL_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_PERF_EVENT_SEL_3;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_PERF_EVENT_SEL_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_PERF_EVENT_SEL_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LCL_GRPSCAN_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_NXC_FETCH_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_TCTXT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_RMT_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_NCKO_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_LCL_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_NCKI_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_RSP_LCL_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_CHKO_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_ST_RMT_CHKI_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_REPLAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_DMA_WR_DONE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_LCL_VC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC,
           INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_NXC_REGS_PERF_EVENT_SEL_3_LD_RMT_VC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH3_DATA1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH3_DATA1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH3_DATA1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH3_DATA1;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH3_DATA1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH3_DATA1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH3_DATA1));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH3_DATA1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_DBG_PMC_ATX1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_PMC_ATX1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_DBG_PMC_ATX1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_PMC_ATX1;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_DBG_PMC_ATX1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_DBG_PMC_ATX1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_DBG_PMC_ATX1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_0,
           INT_PC_REGS_DBG_PMC_ATX1_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_0,
           INT_PC_REGS_DBG_PMC_ATX1_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_0,
           INT_PC_REGS_DBG_PMC_ATX1_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_1,
           INT_PC_REGS_DBG_PMC_ATX1_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_1,
           INT_PC_REGS_DBG_PMC_ATX1_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_1,
           INT_PC_REGS_DBG_PMC_ATX1_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_2,
           INT_PC_REGS_DBG_PMC_ATX1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_2,
           INT_PC_REGS_DBG_PMC_ATX1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_2,
           INT_PC_REGS_DBG_PMC_ATX1_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_3,
           INT_PC_REGS_DBG_PMC_ATX1_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_3,
           INT_PC_REGS_DBG_PMC_ATX1_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_3,
           INT_PC_REGS_DBG_PMC_ATX1_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_15,
           INT_PC_REGS_DBG_PMC_ATX1_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_15,
           INT_PC_REGS_DBG_PMC_ATX1_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_15,
           INT_PC_REGS_DBG_PMC_ATX1_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_4R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_4R,
           INT_PC_REGS_DBG_PMC_ATX1_4R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_4R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_4R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_4R,
           INT_PC_REGS_DBG_PMC_ATX1_4R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_4R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_4R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_4R,
           INT_PC_REGS_DBG_PMC_ATX1_4R_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_4R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_4W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_4W,
           INT_PC_REGS_DBG_PMC_ATX1_4W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_4W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_4W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_4W,
           INT_PC_REGS_DBG_PMC_ATX1_4W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_4W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_4W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_4W,
           INT_PC_REGS_DBG_PMC_ATX1_4W_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_4W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_5,
           INT_PC_REGS_DBG_PMC_ATX1_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_5,
           INT_PC_REGS_DBG_PMC_ATX1_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_5,
           INT_PC_REGS_DBG_PMC_ATX1_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_6,
           INT_PC_REGS_DBG_PMC_ATX1_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_6,
           INT_PC_REGS_DBG_PMC_ATX1_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_6,
           INT_PC_REGS_DBG_PMC_ATX1_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_7,
           INT_PC_REGS_DBG_PMC_ATX1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_7,
           INT_PC_REGS_DBG_PMC_ATX1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_7,
           INT_PC_REGS_DBG_PMC_ATX1_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_8,
           INT_PC_REGS_DBG_PMC_ATX1_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_8,
           INT_PC_REGS_DBG_PMC_ATX1_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_8,
           INT_PC_REGS_DBG_PMC_ATX1_8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_9,
           INT_PC_REGS_DBG_PMC_ATX1_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_9,
           INT_PC_REGS_DBG_PMC_ATX1_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_9,
           INT_PC_REGS_DBG_PMC_ATX1_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_10,
           INT_PC_REGS_DBG_PMC_ATX1_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_10,
           INT_PC_REGS_DBG_PMC_ATX1_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_10,
           INT_PC_REGS_DBG_PMC_ATX1_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_11,
           INT_PC_REGS_DBG_PMC_ATX1_11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_11,
           INT_PC_REGS_DBG_PMC_ATX1_11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_11,
           INT_PC_REGS_DBG_PMC_ATX1_11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_12,
           INT_PC_REGS_DBG_PMC_ATX1_12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_12,
           INT_PC_REGS_DBG_PMC_ATX1_12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_12,
           INT_PC_REGS_DBG_PMC_ATX1_12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_13,
           INT_PC_REGS_DBG_PMC_ATX1_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX1_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX1_13,
           INT_PC_REGS_DBG_PMC_ATX1_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX1_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX1));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX1_13,
           INT_PC_REGS_DBG_PMC_ATX1_13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_DBG_PMC_ATX1_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_DBG_ATX_ORDER_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_DBG_ATX_ORDER_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_DBG_ATX_ORDER_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_DBG_ATX_ORDER_1;
#endif
    return fapi2::getScom(i_target, INT_VC_DBG_ATX_ORDER_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_DBG_ATX_ORDER_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_DBG_ATX_ORDER_1));
#endif
    return fapi2::putScom(i_target, INT_VC_DBG_ATX_ORDER_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_EASC_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_EASC_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_CFG;
#endif
    return fapi2::getScom(i_target, INT_VC_EASC_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_EASC_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_CFG));
#endif
    return fapi2::putScom(i_target, INT_VC_EASC_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_CFG_RESERVED_16_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_EASC_CFG_RESERVED_16_25,
           INT_VC_EASC_CFG_RESERVED_16_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_CFG_RESERVED_16_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_CFG_RESERVED_16_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_EASC_CFG_RESERVED_16_25,
           INT_VC_EASC_CFG_RESERVED_16_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_CFG_RESERVED_16_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_CFG_RESERVED_16_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_CFG));
#endif
    return i_data.extractToRight<INT_VC_EASC_CFG_RESERVED_16_25,
           INT_VC_EASC_CFG_RESERVED_16_25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_CFG_RESERVED_16_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_CFG_MAX_PTAG_IN_USE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_EASC_CFG_MAX_PTAG_IN_USE,
           INT_VC_EASC_CFG_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_CFG_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_CFG_MAX_PTAG_IN_USE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_EASC_CFG_MAX_PTAG_IN_USE,
           INT_VC_EASC_CFG_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_CFG_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_CFG_MAX_PTAG_IN_USE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_CFG));
#endif
    return i_data.extractToRight<INT_VC_EASC_CFG_MAX_PTAG_IN_USE,
           INT_VC_EASC_CFG_MAX_PTAG_IN_USE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_CFG_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_EASC_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_FLUSH_INJECT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_EASC_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_FLUSH_INJECT;
#endif
    return fapi2::getScom(i_target, INT_VC_EASC_FLUSH_INJECT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_EASC_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return fapi2::putScom(i_target, INT_VC_EASC_FLUSH_INJECT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_BLOCKID,
           INT_VC_EASC_FLUSH_INJECT_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_BLOCKID,
           INT_VC_EASC_FLUSH_INJECT_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_FLUSH_INJECT_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_EASC_FLUSH_INJECT_BLOCKID,
           INT_VC_EASC_FLUSH_INJECT_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_OFFSET,
           INT_VC_EASC_FLUSH_INJECT_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_OFFSET,
           INT_VC_EASC_FLUSH_INJECT_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_FLUSH_INJECT_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_EASC_FLUSH_INJECT_OFFSET,
           INT_VC_EASC_FLUSH_INJECT_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK,
           INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK,
           INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK,
           INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK,
           INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK,
           INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK,
           INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_EAS_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EAS_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_EAS_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EAS_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_VC_EAS_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_EAS_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_EAS_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_VC_EAS_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EAS_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE,
           INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EAS_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE,
           INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EAS_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE,
           INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EAS_BLOCK_MODE_INT_VC_EAS_BLOCK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH0_DATA3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH0_DATA3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH0_DATA3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH0_DATA3;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH0_DATA3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH0_DATA3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_DATA3));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH0_DATA3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ERR_CFG_G2R1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERR_CFG_G2R1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ERR_CFG_G2R1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERR_CFG_G2R1;
#endif
    return fapi2::getScom(i_target, INT_VC_ERR_CFG_G2R1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ERR_CFG_G2R1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G2R1));
#endif
    return fapi2::putScom(i_target, INT_VC_ERR_CFG_G2R1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G2R1));
#endif
    return o_data.insertFromRight<INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG,
           INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G2R1));
#endif
    return o_data.insertFromRight<INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG,
           INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G2R1));
#endif
    return i_data.extractToRight<INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG,
           INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERR_CFG_G2R1_INT_VC_ERR_CFG_G2R1_ERROR_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_BANK0_TAU(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_TAU;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_BANK0_TAU(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_TAU;
#endif
    return fapi2::getScom(i_target, MCD_BANK0_TAU, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_BANK0_TAU(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return fapi2::putScom(i_target, MCD_BANK0_TAU, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.setBit<MCD_BANK0_TAU_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_TAU_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.clearBit<MCD_BANK0_TAU_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TAU_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.extractToRight<MCD_BANK0_TAU_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MCD_BANK0_TAU_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.getBit<MCD_BANK0_TAU_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_CHIP_CONTAINED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_CHIP_CONTAINED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_CHIP_CONTAINED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_CHIP_CONTAINED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_CHIP_CONTAINED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_CHIP_CONTAINED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_CHIP_CONTAINED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.setBit<MCD_BANK0_TAU_CHIP_CONTAINED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_CHIP_CONTAINED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_TAU_CHIP_CONTAINED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.clearBit<MCD_BANK0_TAU_CHIP_CONTAINED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_CHIP_CONTAINED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TAU_CHIP_CONTAINED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.extractToRight<MCD_BANK0_TAU_CHIP_CONTAINED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_CHIP_CONTAINED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MCD_BANK0_TAU_CHIP_CONTAINED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.getBit<MCD_BANK0_TAU_CHIP_CONTAINED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_CHIP_CONTAINED_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_SMF_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.setBit<MCD_BANK0_TAU_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_TAU_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.clearBit<MCD_BANK0_TAU_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TAU_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.extractToRight<MCD_BANK0_TAU_SMF_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MCD_BANK0_TAU_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.getBit<MCD_BANK0_TAU_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_GRP_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_GRP_SIZE,
           MCD_BANK0_TAU_GRP_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_GRP_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_GRP_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_GRP_SIZE,
           MCD_BANK0_TAU_GRP_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_GRP_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TAU_GRP_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.extractToRight<MCD_BANK0_TAU_GRP_SIZE,
           MCD_BANK0_TAU_GRP_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_GRP_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_GRP_BASE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_GRP_BASE,
           MCD_BANK0_TAU_GRP_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_GRP_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TAU_GRP_BASE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return o_data.insertFromRight<MCD_BANK0_TAU_GRP_BASE,
           MCD_BANK0_TAU_GRP_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_GRP_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TAU_GRP_BASE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TAU));
#endif
    return i_data.extractToRight<MCD_BANK0_TAU_GRP_BASE,
           MCD_BANK0_TAU_GRP_BASE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_TAU_GRP_BASE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DBG_DMA_ENG_FIR_MASK_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_MASK_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DBG_DMA_ENG_FIR_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_MASK_RW;
#endif
    return fapi2::getScom(i_target, NX_DBG_DMA_ENG_FIR_MASK_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DBG_DMA_ENG_FIR_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_MASK_RW, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, NX_DBG_DMA_ENG_FIR_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_DBG_DMA_ENG_FIR_MASK_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DBG_DMA_ENG_FIR_MASK_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_MASK_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DBG_DMA_ENG_FIR_MASK_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_MASK_WO_AND;
#endif
    return fapi2::getScom(i_target, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DBG_DMA_ENG_FIR_MASK_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_MASK_RW, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, NX_DBG_DMA_ENG_FIR_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DBG_DMA_ENG_FIR_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_MASK_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DBG_DMA_ENG_FIR_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_MASK_WO_OR;
#endif
    return fapi2::getScom(i_target, NX_DBG_DMA_ENG_FIR_MASK_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DBG_DMA_ENG_FIR_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_MASK_RW, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, NX_DBG_DMA_ENG_FIR_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_DBG_DMA_ENG_FIR_MASK_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_MASK_RW, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, NX_DBG_DMA_ENG_FIR_MASK_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS,
           NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_MASK_RW, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, NX_DBG_DMA_ENG_FIR_MASK_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS,
           NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_MASK_RW, NX_DBG_DMA_ENG_FIR_MASK_WO_AND, NX_DBG_DMA_ENG_FIR_MASK_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS,
           NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_MASK_NX_DMA_ENG_FIR_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SU_ERAT_ERROR_RPT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SU_ERAT_ERROR_RPT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SU_ERAT_ERROR_RPT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SU_ERAT_ERROR_RPT;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SU_ERAT_ERROR_RPT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SU_ERAT_ERROR_RPT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERAT_ERROR_RPT));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SU_ERAT_ERROR_RPT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERAT_ERROR_RPT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT,
           NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERAT_ERROR_RPT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT,
           NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERAT_ERROR_RPT));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT,
           NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERAT_ERROR_RPT_ERAT_ERROR_RPT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.setBit<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.clearBit<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.getBit<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_BAR_SYM_LO_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2,
           PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HOP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PUMP_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REPRO_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SW_AB_WAIT_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_GP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_NP_HW_MARK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2,
           PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_SP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_SP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_SP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_SP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_0_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_1_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_2_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_3_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_4_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_5_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_6_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3,
           PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_SP_CMD_RATE_7_EN3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_VALID_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_0_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_1_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_2_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_3_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_4_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_5_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_6_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0,
           PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_STATION_GP_CMD_RATE_7_EQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_COMPB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_COMPB;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_COMPB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_COMPB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTYPE_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TSIZE_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_TTAG_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_MASK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_CRESP_POLARITY_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPB_SCOPE_EQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HOP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PUMP_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REPRO_MODE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_GP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_NP_HW_MARK_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2,
           PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_COMPB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_COMPB;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_COMPB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_COMPB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTYPE_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TSIZE_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_TTAG_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_MASK_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_CRESP_POLARITY_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPB_SCOPE_EQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_FIR_SPARE_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_0_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_1_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_2_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_3_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_4_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_5_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_6_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6,
           PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_GP_CMD_RATE_7_EQ6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_FIR_SPARE_15_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_VALID_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_USE_BURST_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTYPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TSIZE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_TTAG_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_CRESP_POLARITY_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPA_SCOPE_ES3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_SCOPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_A_PRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_SCOPE_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_B_PRESP_MASK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPX_AB_LPC_D_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_PBIXXX_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_ES3_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HOP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PUMP_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REPRO_MODE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SW_AB_WAIT_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_GP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_NP_HW_MARK_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_STEP_SEL_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3,
           PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES4_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_PM_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_PM_CONTROL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES4_STATION_PM_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES4_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES4_STATION_PM_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1,
           PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1,
           PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1,
           PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2,
           PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2,
           PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2,
           PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_PM_CONTROL_SPARE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PMU2_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU2_TLPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PMU2_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU2_TLPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PMU2_TLPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PMU2_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PMU2_TLPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_0,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_0,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_0,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_1,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_1,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_1,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_2,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_2,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_2,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_3,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_3,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU2_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU2_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU2_TLPM_COUNTER_3,
           PB_PTLSCOM10_PMU2_TLPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_PMU2_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_DLY_0123_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_DLY_0123_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_TL_LINK_DLY_0123_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_TL_LINK_DLY_0123_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X0_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_X1_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY,
           PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM10_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}


#ifndef __PPE_HCODE__
}
}

#endif
#endif
